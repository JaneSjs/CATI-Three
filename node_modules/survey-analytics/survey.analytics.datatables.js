/*!
 * surveyjs - SurveyJS Dashboard library v1.12.3
 * Copyright (c) 2015-2024 Devsoft Baltic OÜ  - http://surveyjs.io/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("survey-core"));
	else if(typeof define === 'function' && define.amd)
		define("SurveyAnalyticsDatatables", ["survey-core"], factory);
	else if(typeof exports === 'object')
		exports["SurveyAnalyticsDatatables"] = factory(require("survey-core"));
	else
		root["SurveyAnalyticsDatatables"] = factory(root["Survey"]);
})(this, (__WEBPACK_EXTERNAL_MODULE_survey_core__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/svgbundle.html":
/*!****************************!*\
  !*** ./src/svgbundle.html ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Module
var code = "<svg style=\"display:none;\"><symbol viewBox=\"0 0 16 16\" id=\"sa-svg-detail\"><circle cx=\"1.5\" cy=\"8.5\" r=\"1.5\"></circle><circle cx=\"7.5\" cy=\"8.5\" r=\"1.5\"></circle><circle cx=\"13.5\" cy=\"8.5\" r=\"1.5\"></circle></symbol><symbol viewBox=\"0 0 16 16\" id=\"sa-svg-drag\"><path d=\"M13 5l-1 1 1 1H9V3l1 1 1-1-3-3-3 3 1 1 1-1v4H3l1-1-1-1-3 3 3 3 1-1-1-1h4v4l-1-1-1 1 3 3 3-3-1-1-1 1V9h4l-1 1 1 1 3-3z\"></path></symbol><symbol viewBox=\"0 0 16 16\" id=\"sa-svg-hide\"><path d=\"M12.79 4.2L16 1l-1-1-3.32 3.32C10.57 2.55 9.32 2 8 2 3.63 2 0 7.97 0 7.97s1.27 2.1 3.21 3.82l-3.23 3.23.98.98 3.35-3.34C5.41 13.44 6.67 14 8 14c4.37 0 8-6 8-6s-1.27-2.09-3.21-3.8zM2 7.97c1.07-1.47 3.61-4 6-4 .8 0 1.6.27 2.35.68l-.78.78c-.46-.29-.99-.46-1.57-.46-1.66 0-3 1.34-3 3 0 .58.17 1.11.46 1.57l-.97.97A13.38 13.38 0 0 1 2 7.97zm6 4c-.8 0-1.59-.27-2.33-.67l.78-.77c.45.27.98.44 1.55.44 1.66 0 3-1.34 3-3 0-.57-.17-1.09-.44-1.55l.98-.98c1.11.87 2.01 1.91 2.46 2.52-1.07 1.48-3.61 4.01-6 4.01z\"></path></symbol><symbol viewBox=\"0 0 16 16\" id=\"sa-svg-makeprivate\"><circle cx=\"8\" cy=\"4\" r=\"3\"></circle><path d=\"M8 8c-3.31 0-6 2.73-6 4.67S5.27 15 8 15s6-.4 6-2.33S11.31 8 8 8z\"></path></symbol><symbol viewBox=\"0 0 16 16\" id=\"sa-svg-makepublic\"><circle cx=\"6\" cy=\"5\" r=\"3\"></circle><path d=\"M10 5c0 .34-.06.67-.14.99.05 0 .09.01.14.01 1.66 0 3-1.34 3-3s-1.34-3-3-3C8.97 0 8.07.52 7.53 1.3 8.98 1.91 10 3.33 10 5zM6 9c-3.31 0-6 2.73-6 4.67S3.27 16 6 16s6-.4 6-2.33S9.31 9 6 9zM10 7c-.19 0-.38.01-.57.03a4.14 4.14 0 0 1-1.37 1.39c3 .83 5.23 3.31 5.42 5.28 1.44-.31 2.52-.92 2.52-2.03C16 9.74 13.31 7 10 7z\"></path></symbol><symbol viewBox=\"0 0 16 16\" id=\"sa-svg-movetodetails\"><circle cx=\"1.5\" cy=\"14.5\" r=\"1.5\"></circle><circle cx=\"7.5\" cy=\"14.5\" r=\"1.5\"></circle><circle cx=\"13.5\" cy=\"14.5\" r=\"1.5\"></circle><path d=\"M12 1h3v9h-3zM2.02 7.02L1 6 0 7l3 3 3-3-1-1-.94.94C4.33 4.73 6.21 3 8.5 3c.17 0 .33.03.5.05V1.03C8.83 1.01 8.67 1 8.5 1 5.08 1 2.27 3.66 2.02 7.02z\"></path></symbol><symbol viewBox=\"0 0 16 16\" id=\"sa-svg-noncommercial\"><path d=\"M8 0L0 15h16L8 0zm1 13H7v-2h2v2zm-2-3V5h2v5H7z\"></path></symbol><symbol viewBox=\"0 0 16 16\" id=\"sa-svg-sorting\"><path d=\"M8 3l2 2 1-1-3-3-3 3 1 1zM8 13l-2-2-1 1 3 3 3-3-1-1z\"></path></symbol></svg>";
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (code);

/***/ }),

/***/ "./src/tables/datatables.scss":
/*!************************************!*\
  !*** ./src/tables/datatables.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/analytics-localization/arabic.ts":
/*!**********************************************!*\
  !*** ./src/analytics-localization/arabic.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arabicStrings: () => (/* binding */ arabicStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var arabicStrings = {
    groupButton: "زرار المجموعة",
    ungroupButton: "تم التحديث من خلالى",
    selectButton: "اختر",
    hideColumn: "اخفاء العمود",
    showColumn: "اظهار",
    makePrivateColumn: "أجعل العمود خاص",
    makePublicColumn: "أجعل العمود عام",
    moveToDetail: "انتقل إلى التفاصيل",
    showAsColumn: "إظهار كعمود",
    filterPlaceholder: "بحث...",
    removeRows: "حذف",
    showLabel: "اظهار",
    entriesLabel: "مدخلات",
    visualizer_text: "جداول",
    visualizer_wordcloud: "كلمات",
    visualizer_histogram: "الرسم البياني",
    visualizer_number: "متوسط",
    visualizer_choices: "جدول",
    visualizer_selectBase: "رسم بياني",
    // visualizer_matrix: "Chart",
    chartType_bar: "شريط",
    chartType_vbar: "شريط عمودي",
    chartType_stackedbar: "شريط مكدس",
    chartType_doughnut: "Doughnut",
    chartType_pie: "Pie",
    chartType_scatter: "Scatter",
    chartType_gauge: "Gauge",
    chartType_bullet: "Bullet",
    hideButton: "اخفاء",
    makePrivateButton: "أجعل خاص",
    makePublicButton: "أجعل عام",
    showButton: "اظهار",
    filter: "ترشح",
    resetFilter: "إعادة تعيين",
    changeLocale: "تغيير اللغة",
    clearButton: "مسح",
    addElement: "اختر سؤالاً للعرض ...",
    defaultOrder: "الترتيب الافتراضي",
    ascOrder: "تصاعدى",
    descOrder: "تنازلى",
    showMinorColumns: "إظهار الأعمدة الثانوية",
    otherCommentTitle: "بنود وتعليقات أخرى",
    showPercentages: "عرض النسب المئوية",
    hidePercentages: "إخفاء النسب",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "تنزيل بصيغة png",
    hideEmptyAnswers: "إخفاء الإجابات الفارغة",
    showEmptyAnswers: "إظهار الإجابات الفارغة",
    "topNValueText-1": "جميع الإجابات",
    topNValueText5: "أهم 5 إجابات",
    topNValueText10: "أفضل 10 إجابات",
    topNValueText20: "أفضل 20 إجابة",
    hideMissingAnswers: "إخفاء الإجابات المفقودة",
    showMissingAnswers: "عرض الإجابات المفقودة",
    missingAnswersLabel: "أجوبة مفقودة",
    noVisualizerForQuestion: "لم يتم العرض بعد",
    noResults: "لا يوجد نتائج للعرض",
    showPerValues: "لكل القيم",
    showPerColumns: "لكل الأعمدة",
    answer: "إجب",
    correctAnswer: "الاجابة الصحيحة: ",
    percent: "النسبه المئويه",
    responses: "الاستجابات"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["ar"] = arabicStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["ar"] = "العربية";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.topNValueText-1: "All answers" => "جميع الإجابات"
// undefined.topNValueText5: "Top 5 answers" => "أهم 5 إجابات"
// undefined.topNValueText10: "Top 10 answers" => "أفضل 10 إجابات"
// undefined.topNValueText20: "Top 20 answers" => "أفضل 20 إجابة"


/***/ }),

/***/ "./src/analytics-localization/dutch.ts":
/*!*********************************************!*\
  !*** ./src/analytics-localization/dutch.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dutchStrings: () => (/* binding */ dutchStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var dutchStrings = {
    groupButton: "Groep door mij",
    ungroupButton: "Degroeperen bij mij",
    selectButton: "Selecteer mij",
    hideColumn: "Kolom verbergen",
    showColumn: "Toon kolom",
    makePrivateColumn: "Kolom privé maken",
    makePublicColumn: "Maak de kolom openbaar",
    moveToDetail: "Ga naar Detail",
    showAsColumn: "Weergeven als kolom",
    filterPlaceholder: "Zoeken...",
    removeRows: "Verwijder rijen",
    showLabel: "Tonen",
    entriesLabel: "inzendingen",
    visualizer_text: "Teksten in tabel",
    visualizer_wordcloud: "Wordcloud",
    visualizer_histogram: "Histogram",
    visualizer_number: "Gemiddeld",
    visualizer_choices: "Tafel",
    visualizer_selectBase: "Zeekaart",
    // visualizer_matrix: "Chart",
    chartType_bar: "Bar",
    chartType_vbar: "Verticale balk",
    chartType_stackedbar: "Gestapelde Bar",
    chartType_doughnut: "Donut",
    chartType_pie: "Taart",
    chartType_scatter: "Verstrooien",
    chartType_gauge: "Meter",
    chartType_bullet: "Kogel",
    hideButton: "Verbergen",
    makePrivateButton: "Maak prive",
    makePublicButton: "Openbaar maken",
    showButton: "Tonen",
    filter: "Filter",
    resetFilter: "Filter resetten",
    changeLocale: "Wijzig de landinstelling",
    clearButton: "Doorzichtig",
    addElement: "Kies een vraag om weer te geven ...",
    defaultOrder: "Standaardvolgorde",
    ascOrder: "Oplopend",
    descOrder: "Aflopend",
    showMinorColumns: "Toon kleine kolommen",
    otherCommentTitle: "Andere items en opmerkingen",
    showPercentages: "Percentages weergeven",
    hidePercentages: "Verberg percentages",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Download plot als een png",
    hideEmptyAnswers: "Verberg lege antwoorden",
    showEmptyAnswers: "Toon lege antwoorden",
    "topNValueText-1": "Alle antwoorden",
    topNValueText5: "Top 5 antwoorden",
    topNValueText10: "Top 10 antwoorden",
    topNValueText20: "Top 20 antwoorden",
    hideMissingAnswers: "Ontbrekende antwoorden verbergen",
    showMissingAnswers: "Ontbrekende antwoorden weergeven",
    missingAnswersLabel: "Ontbrekende antwoorden",
    noVisualizerForQuestion: "Dit vraagtype is nog niet gevisualiseerd",
    noResults: "Er zijn nog geen resultaten",
    showPerValues: "Per waarden",
    showPerColumns: "Per Kolommen",
    answer: "Antwoorden",
    correctAnswer: "Goed antwoord: ",
    percent: "Procent",
    responses: "Reacties"
};
//Uncomment these two lines on creating a translation file. You should replace "en" and enStrings with your locale ("fr", "de" and so on) and your variable.
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["nl"] = dutchStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["nl"] = "Nederlands";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.visualizer_histogram: "Histogram" => "Histogram"
// undefined.visualizer_number: "Average" => "Gemiddeld"
// undefined.visualizer_choices: "Table" => "Tafel"
// undefined.visualizer_selectBase: "Chart" => "Zeekaart"
// undefined.chartType_vbar: "Vertical Bar" => "Verticale balk"
// undefined.filter: "Filter" => "Filter"
// undefined.hideMissingAnswers: "Hide missing answers" => "Ontbrekende antwoorden verbergen"
// undefined.showMissingAnswers: "Show missing answers" => "Ontbrekende antwoorden weergeven"
// undefined.missingAnswersLabel: "Missing answers" => "Ontbrekende antwoorden"
// undefined.noVisualizerForQuestion: "This question type is not visualized yet" => "Dit vraagtype is nog niet gevisualiseerd"
// undefined.noResults: "There are no results yet" => "Er zijn nog geen resultaten"
// undefined.showPerValues: "Per Values" => "Per waarden"
// undefined.showPerColumns: "Per Columns" => "Per Kolommen"
// undefined.answer: "Answer" => "Antwoorden"
// undefined.correctAnswer: "Correct answer: " => "Goed antwoord: "
// undefined.percent: "Percent" => "Procent"
// undefined.responses: "Responses" => "Reacties"


/***/ }),

/***/ "./src/analytics-localization/english.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/english.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   englishStrings: () => (/* binding */ englishStrings)
/* harmony export */ });
// Uncomment the line below if you create a custom dictionary
// import { localization } from "../localizationManager";
var englishStrings = {
    groupButton: "Group By Me",
    ungroupButton: "Ungroup By Me",
    selectButton: "Select Me",
    hideColumn: "Hide column",
    showColumn: "Show column",
    makePrivateColumn: "Make column private",
    makePublicColumn: "Make column public",
    moveToDetail: "Move to Detail",
    showAsColumn: "Show as Column",
    filterPlaceholder: "Search...",
    removeRows: "Remove rows",
    showLabel: "Show",
    entriesLabel: "entries",
    visualizer_text: "Texts in table",
    visualizer_wordcloud: "Wordcloud",
    visualizer_histogram: "Histogram",
    visualizer_number: "Average",
    visualizer_choices: "Table",
    visualizer_selectBase: "Chart",
    visualizer_matrix: "Chart",
    chartType_bar: "Bar",
    chartType_vbar: "Vertical Bar",
    chartType_stackedbar: "Stacked Bar",
    chartType_doughnut: "Doughnut",
    chartType_pie: "Pie",
    chartType_scatter: "Scatter",
    chartType_gauge: "Gauge",
    chartType_bullet: "Bullet",
    chartType_line: "Line",
    hideButton: "Hide",
    makePrivateButton: "Make private",
    makePublicButton: "Make public",
    showButton: "Show",
    filter: "Filter",
    resetFilter: "Reset Filter",
    changeLocale: "Change Locale",
    clearButton: "Clear",
    addElement: "Choose question to show...",
    defaultOrder: "Default Order",
    ascOrder: "Ascending",
    descOrder: "Descending",
    showMinorColumns: "Show minor columns",
    otherCommentTitle: "Other items and comments",
    showPercentages: "Show percentages",
    hidePercentages: "Hide percentages",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Download plot as a PNG file",
    hideEmptyAnswers: "Hide empty answers",
    showEmptyAnswers: "Show empty answers",
    "topNValueText-1": "All answers",
    "topNValueText5": "Top 5 answers",
    "topNValueText10": "Top 10 answers",
    "topNValueText20": "Top 20 answers",
    hideMissingAnswers: "Hide missing answers",
    showMissingAnswers: "Show missing answers",
    missingAnswersLabel: "Missing answers",
    noVisualizerForQuestion: "This question type is not visualized yet",
    noResults: "There are no results yet",
    showPerValues: "Per Values",
    showPerColumns: "Per Columns",
    answer: "Answer",
    correctAnswer: "Correct answer: ",
    percent: "Percent",
    percentage: "Percentage",
    statistics_chart: "Chart",
    responses: "Responses",
    visualizer_nps: "NPS",
    npsScore: "NPS",
    npsPromoters: "Promoters",
    npsPassives: "Passives",
    npsDetractors: "Detractors",
};
// Uncomment the lines below if you create a custom dictionary.
// Replace "en" with a custom locale code (for example, "fr" or "de"),
// Replace `englishStrings` with the name of the variable that contains the custom dictionary.
// localization.locales["en"] = englishStrings;
// localization.localeNames["en"] = "English";


/***/ }),

/***/ "./src/analytics-localization/farsi.ts":
/*!*********************************************!*\
  !*** ./src/analytics-localization/farsi.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   farsiStrings: () => (/* binding */ farsiStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var farsiStrings = {
    groupButton: "گروه بندی با",
    ungroupButton: "حذف گروه",
    selectButton: "انتخاب",
    hideColumn: "مخفی کردن ستون",
    showColumn: "نمایش ستون",
    makePrivateColumn: "خصوصی کردن ستون",
    makePublicColumn: "عمومی کردن ستون",
    moveToDetail: "انتقال به جزئیات",
    showAsColumn: "نمایش به عنوان ستون",
    filterPlaceholder: "جستجو...",
    removeRows: "حذف سطرها",
    showLabel: "نمایش",
    entriesLabel: "ورودی",
    visualizer_text: "متون در جدول",
    visualizer_wordcloud: "ابر کلمات",
    visualizer_histogram: "هیستوگرام",
    visualizer_number: "متوسط",
    visualizer_choices: "جدول",
    visualizer_selectBase: "نمودار",
    // visualizer_matrix: "Chart",
    chartType_bar: "میله ای",
    chartType_vbar: "نوار عمودی",
    chartType_stackedbar: "نوار پشته",
    chartType_doughnut: "دونات",
    chartType_pie: "دابره ای(pie)",
    chartType_scatter: "پراکندگی(Scatter)",
    chartType_gauge: "عقربه ای",
    chartType_bullet: "Bullet",
    hideButton: "مخفی",
    makePrivateButton: "خصوصی کردن",
    makePublicButton: "عمومی کردن",
    showButton: "نمایش",
    filter: "فیلتر",
    resetFilter: "بازنشانی فیلترها",
    changeLocale: "تغییر محلی",
    clearButton: "پاک کردن",
    addElement: "انتخاب سوال برای نمایش...",
    defaultOrder: "ترتیب پیشفرض",
    ascOrder: "صعودی",
    descOrder: "نزولی",
    showMinorColumns: "نمایش ستونهای فرعی",
    otherCommentTitle: "سایر موارد و نظرات",
    showPercentages: "نمایش درصد",
    hidePercentages: "درصدهای مخفی",
    pdfDownloadCaption: "پی دی اف",
    xlsxDownloadCaption: "اکسل",
    csvDownloadCaption: "Csv",
    saveDiagramAsPNG: "دانلود طرح به عنوان یک فایل PNG",
    hideEmptyAnswers: "مخفی کردن پاسخهای خالی",
    showEmptyAnswers: "نمایش پاسخهای خالی",
    "topNValueText-1": "همه پاسخ ها",
    topNValueText5: "5 پاسخ برتر",
    topNValueText10: "10 پاسخ برتر",
    topNValueText20: "20 پاسخ برتر",
    hideMissingAnswers: "مخفی کردن پاسخهای گمشده",
    showMissingAnswers: "نمایش پاسخهای گمشده",
    missingAnswersLabel: "پاسخ های گمشده",
    noVisualizerForQuestion: "این نوع سوال هنوز تجسم نشده است",
    noResults: "هنوز نتیجه ای حاصل نشده است",
    showPerValues: "به ازای هر ارزش",
    showPerColumns: "در هر ستون",
    answer: "پاسخ",
    correctAnswer: "پاسخ صحیح: ",
    percent: "درصد",
    responses: "پاسخ"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["fa"] = farsiStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["fa"] = "فارسی";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.makePrivateColumn: "Make column private" => "خصوصی کردن ستون"
// undefined.makePublicColumn: "Make column public" => "عمومی کردن ستون"
// undefined.filterPlaceholder: "Search..." => "جستجو..."
// undefined.removeRows: "Remove rows" => "حذف سطرها"
// undefined.showLabel: "Show" => "نمایش"
// undefined.entriesLabel: "entries" => "ورودی"
// undefined.visualizer_histogram: "Histogram" => "هیستوگرام"
// undefined.visualizer_number: "Average" => "متوسط"
// undefined.visualizer_choices: "Table" => "جدول"
// undefined.visualizer_selectBase: "Chart" => "نمودار"
// undefined.chartType_vbar: "Vertical Bar" => "نوار عمودی"
// undefined.chartType_stackedbar: "Stacked Bar" => "نوار پشته"
// undefined.chartType_doughnut: "Doughnut" => "دونات"
// undefined.makePrivateButton: "Make private" => "خصوصی کردن"
// undefined.makePublicButton: "Make public" => "عمومی کردن"
// undefined.showButton: "Show" => "نمایش"
// undefined.filter: "Filter" => "فیلتر"
// undefined.changeLocale: "Change Locale" => "تغییر محلی"
// undefined.defaultOrder: "Default Order" => "ترتیب پیشفرض"
// undefined.ascOrder: "Ascending" => "صعودی"
// undefined.descOrder: "Descending" => "نزولی"
// undefined.showMinorColumns: "Show minor columns" => "نمایش ستونهای فرعی"
// undefined.otherCommentTitle: "Other items and comments" => "سایر موارد و نظرات"
// undefined.showPercentages: "Show percentages" => "نمایش درصد"
// undefined.hidePercentages: "Hide percentages" => "درصدهای مخفی"
// undefined.pdfDownloadCaption: "PDF" => "پی دی اف"
// undefined.xlsxDownloadCaption: "Excel" => "اکسل"
// undefined.csvDownloadCaption: "CSV" => "Csv"
// undefined.saveDiagramAsPNG: "Download plot as a PNG file" => "دانلود طرح به عنوان یک فایل PNG"
// undefined.hideEmptyAnswers: "Hide empty answers" => "مخفی کردن پاسخهای خالی"
// undefined.showEmptyAnswers: "Show empty answers" => "نمایش پاسخهای خالی"
// undefined.topNValueText-1: "All answers" => "همه پاسخ ها"
// undefined.topNValueText5: "Top 5 answers" => "5 پاسخ برتر"
// undefined.topNValueText10: "Top 10 answers" => "10 پاسخ برتر"
// undefined.topNValueText20: "Top 20 answers" => "20 پاسخ برتر"
// undefined.hideMissingAnswers: "Hide missing answers" => "مخفی کردن پاسخهای گمشده"
// undefined.showMissingAnswers: "Show missing answers" => "نمایش پاسخهای گمشده"
// undefined.missingAnswersLabel: "Missing answers" => "پاسخ های گمشده"
// undefined.noVisualizerForQuestion: "This question type is not visualized yet" => "این نوع سوال هنوز تجسم نشده است"
// undefined.noResults: "There are no results yet" => "هنوز نتیجه ای حاصل نشده است"
// undefined.showPerValues: "Per Values" => "به ازای هر ارزش"
// undefined.showPerColumns: "Per Columns" => "در هر ستون"
// undefined.answer: "Answer" => "پاسخ"
// undefined.correctAnswer: "Correct answer: " => "پاسخ صحیح: "
// undefined.percent: "Percent" => "درصد"
// undefined.responses: "Responses" => "پاسخ"


/***/ }),

/***/ "./src/analytics-localization/french.ts":
/*!**********************************************!*\
  !*** ./src/analytics-localization/french.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   frenchStrings: () => (/* binding */ frenchStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var frenchStrings = {
    groupButton: "Grouper",
    ungroupButton: "Dissocier",
    selectButton: "Sélectionner",
    hideColumn: "Masquer colonne",
    showColumn: "Afficher colonne",
    makePrivateColumn: "Rendre la colonne privé",
    makePublicColumn: "Rendre la colonne public",
    moveToDetail: "Déplacer vers détails",
    showAsColumn: "Afficher en colonne",
    filterPlaceholder: "Rechercher...",
    removeRows: "Supprimer colonne",
    showLabel: "Afficher",
    entriesLabel: "entrées",
    visualizer_text: "Textes en table",
    visualizer_wordcloud: "Nuages de mots",
    visualizer_histogram: "Histogramme",
    visualizer_number: "Moyenne",
    visualizer_choices: "Table",
    visualizer_selectBase: "Graphique",
    // visualizer_matrix: "Chart",
    chartType_bar: "Barres",
    chartType_vbar: "Barre verticale",
    chartType_stackedbar: "Barres empilées",
    chartType_doughnut: "Anneau",
    chartType_pie: "Secteurs",
    chartType_scatter: "Nuages de points",
    chartType_gauge: "Gauge",
    chartType_bullet: "Bulles",
    hideButton: "Masquer",
    makePrivateButton: "Rendre privé",
    makePublicButton: "Rendre publique",
    showButton: "Afficher",
    filter: "Filtre",
    resetFilter: "Rafraichir Filtres",
    changeLocale: "Changer les paramètres régionaux",
    clearButton: "Rafraichir",
    addElement: "Choisir la question à afficher...",
    defaultOrder: "Defaut",
    ascOrder: "Ascendant",
    descOrder: "Descendant",
    showMinorColumns: "Afficher les colonnes mineures",
    otherCommentTitle: "Autre élément et commentaires",
    showPercentages: "Afficher les pourcentages",
    hidePercentages: "Masquer les pourcentages",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Exceller",
    csvDownloadCaption: "Fichier CSV",
    saveDiagramAsPNG: "Sauver en png",
    hideEmptyAnswers: "Masquer les réponses vides",
    showEmptyAnswers: "Afficher les réponses vides",
    "topNValueText-1": "Toutes les réponses",
    topNValueText5: "Top 5 des réponses",
    topNValueText10: "Top 10 des réponses",
    topNValueText20: "Top 20 des réponses",
    hideMissingAnswers: "Masquer les réponses manquantes",
    showMissingAnswers: "Afficher les réponses manquantes",
    missingAnswersLabel: "Réponses manquantes",
    noVisualizerForQuestion: "Ce type de question n'est pas encore visualisé",
    noResults: "Il n'y a pas encore de résultats",
    showPerValues: "Par valeur",
    showPerColumns: "Par colonne",
    answer: "Réponse",
    correctAnswer: "Réponse correcte: ",
    percent: "Pourcentage",
    responses: "Réponses"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["fr"] = frenchStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["fr"] = "Français";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.visualizer_histogram: "Histogram" => "Histogramme"
// undefined.visualizer_number: "Average" => "Moyenne"
// undefined.visualizer_choices: "Table" => "Table"
// undefined.visualizer_selectBase: "Chart" => "Graphique"
// undefined.chartType_vbar: "Vertical Bar" => "Barre verticale"
// undefined.changeLocale: "Change Locale" => "Changer les paramètres régionaux"
// undefined.showPercentages: "Show percentages" => "Afficher les pourcentages"
// undefined.hidePercentages: "Hide percentages" => "Masquer les pourcentages"
// undefined.pdfDownloadCaption: "PDF" => "PDF"
// undefined.xlsxDownloadCaption: "Excel" => "Exceller"
// undefined.csvDownloadCaption: "CSV" => "Fichier CSV"
// undefined.hideEmptyAnswers: "Hide empty answers" => "Masquer les réponses vides"
// undefined.showEmptyAnswers: "Show empty answers" => "Afficher les réponses vides"
// undefined.topNValueText-1: "All answers" => "Toutes les réponses"
// undefined.topNValueText5: "Top 5 answers" => "Top 5 des réponses"
// undefined.topNValueText10: "Top 10 answers" => "Top 10 des réponses"
// undefined.topNValueText20: "Top 20 answers" => "Top 20 des réponses"
// undefined.hideMissingAnswers: "Hide missing answers" => "Masquer les réponses manquantes"
// undefined.showMissingAnswers: "Show missing answers" => "Afficher les réponses manquantes"
// undefined.missingAnswersLabel: "Missing answers" => "Réponses manquantes"


/***/ }),

/***/ "./src/analytics-localization/german.ts":
/*!**********************************************!*\
  !*** ./src/analytics-localization/german.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   germanStrings: () => (/* binding */ germanStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var germanStrings = {
    groupButton: "Gruppieren",
    ungroupButton: "Gruppierung aufheben",
    selectButton: "Mich auswählen",
    hideColumn: "Spalte ausblenden",
    showColumn: "Spalte einblenden",
    makePrivateColumn: "Spalte privat machen",
    makePublicColumn: "Spalte veröffentlichen",
    moveToDetail: "in Details verschieben",
    showAsColumn: "Als Spalte anzeigen",
    filterPlaceholder: "Suche...",
    removeRows: "Zeilen entfernen",
    showLabel: "anzeigen",
    entriesLabel: "Einträge",
    visualizer_text: "Texte in Tabellenform",
    visualizer_wordcloud: "Wordcloud",
    visualizer_histogram: "Histogramm",
    visualizer_number: "Durchschnitt",
    visualizer_choices: "Liste",
    visualizer_selectBase: "Diagrammtyp",
    // visualizer_matrix: "Chart",
    chartType_bar: "Balkendiagramm",
    chartType_vbar: "Balkendiagramm vertikal",
    chartType_stackedbar: "Gestapeltes Balkendiagramm",
    chartType_doughnut: "Donut-Diagramm",
    chartType_pie: "Kreisdiagramm",
    chartType_scatter: "Punktediagramm",
    chartType_gauge: "Pegeldiagramm",
    chartType_bullet: "Aufzählungsdiagramm",
    hideButton: "Ausblenden",
    makePrivateButton: "Privat machen",
    makePublicButton: "Öffentlich machen",
    showButton: "Anzeigen",
    filter: "Filter",
    resetFilter: "Filter zurücksetzen",
    changeLocale: "Lokalisierung ändern",
    clearButton: "Einstellungen löschen",
    addElement: "Wählen Sie eine Frage, um zu zeigen...",
    defaultOrder: "Standardreihenfolge",
    ascOrder: "Aufsteigend",
    descOrder: "Absteigend",
    showMinorColumns: "Kleinere Spalten anzeigen",
    otherCommentTitle: "Andere Punkte und Kommentare",
    showPercentages: "Prozentsätze anzeigen",
    hidePercentages: "Prozentsätze ausblenden",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Diagramm als png herunterladen",
    hideEmptyAnswers: "Leere Antworten ausblenden",
    showEmptyAnswers: "Leere Antworten anzeigen",
    "topNValueText-1": "Alle Antworten",
    topNValueText5: "Top 5 Antworten",
    topNValueText10: "Top 10 Antworten",
    topNValueText20: "Top 20 Antworten",
    hideMissingAnswers: "Fehlende Antworten ausblenden",
    showMissingAnswers: "Fehlende Antworten anzeigen",
    missingAnswersLabel: "Fehlede Antworten",
    noVisualizerForQuestion: "Für diesen Fragetyp gibt es noch keine Visualisierung.",
    noResults: "Es liegen noch keine Ergebnisse vor",
    showPerValues: "Pro Wert",
    showPerColumns: "Pro Spalte",
    answer: "Antwort",
    correctAnswer: "Korrekte Antwort: ",
    percent: "Prozent",
    responses: "Antworten"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["de"] = germanStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["de"] = "Deutsch";


/***/ }),

/***/ "./src/analytics-localization/italian.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/italian.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   italianStrings: () => (/* binding */ italianStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var italianStrings = {
    groupButton: "Raggruppa",
    ungroupButton: "Dividi",
    selectButton: "Selezionami",
    hideColumn: "Nascondi colonna",
    showColumn: "Mostra colonna",
    makePrivateColumn: "Rendi la colonna privata",
    makePublicColumn: "Rendi la colonna pubblica",
    moveToDetail: "Sposta in Dettaglio",
    showAsColumn: "Mostra come Colonna",
    filterPlaceholder: "Cerca...",
    removeRows: "Rimuovi righe",
    showLabel: "Mostra",
    entriesLabel: "voci",
    visualizer_text: "Parole in tabella",
    visualizer_wordcloud: "Nuvola di parole",
    visualizer_histogram: "Istogramma",
    visualizer_number: "Media",
    visualizer_choices: "Tabella",
    visualizer_selectBase: "Grafico",
    // visualizer_matrix: "Chart",
    chartType_bar: "Grafico a barre",
    chartType_vbar: "Grafico a barre verticali",
    chartType_stackedbar: "Grafico a barre sovrapposte",
    chartType_doughnut: "Grafico a ciambella",
    chartType_pie: "Grafico a torta",
    chartType_scatter: "Grafico a dispersione",
    chartType_gauge: "Grafico Gauge",
    chartType_bullet: "Punto",
    hideButton: "Nascondi",
    makePrivateButton: "Rendi privato",
    makePublicButton: "Rendi pubblico",
    showButton: "Mostra",
    filter: "Filtro",
    resetFilter: "Cancella filtro",
    changeLocale: "Cambia lingua",
    clearButton: "Cancella",
    addElement: "Scegli la domanda da mostrare...",
    defaultOrder: "Ordine di Default",
    ascOrder: "Ascendente",
    descOrder: "Discendente",
    showMinorColumns: "Mostra colonne secondarie",
    otherCommentTitle: "Altri punti e commenti",
    showPercentages: "Mostra percentuali",
    hidePercentages: "Nascondi percentuali",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Scarica il grafico in formato png",
    hideEmptyAnswers: "Nascondi risposte vuote",
    showEmptyAnswers: "Mostra risposte vuote",
    "topNValueText-1": "Tutte le risposte",
    topNValueText5: "Top 5 risposte",
    topNValueText10: "Top 10 risposte",
    topNValueText20: "Top 20 risposte",
    hideMissingAnswers: "Nascondi le risposte mancanti",
    showMissingAnswers: "Mostra le risposte mancanti",
    missingAnswersLabel: "Risposte mancanti",
    noVisualizerForQuestion: "Questo tipo di domanda non è ancora stato visualizzato",
    noResults: "Non ci sono ancora risultati",
    showPerValues: "Per Valori",
    showPerColumns: "Per Colonne",
    answer: "Risposta",
    correctAnswer: "Risposta esatta: ",
    percent: "Percentuale",
    responses: "Risposte"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["it"] = italianStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["it"] = "Italiano";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.correctAnswer: "Correct answer: " => "Risposta esatta: "


/***/ }),

/***/ "./src/analytics-localization/japanese.ts":
/*!************************************************!*\
  !*** ./src/analytics-localization/japanese.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   japaneseStrings: () => (/* binding */ japaneseStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");

var japaneseStrings = {
    groupButton: "グループ化",
    ungroupButton: "グループ解除",
    selectButton: "選択",
    hideColumn: "列を非表示",
    showColumn: "列を表示",
    makePrivateColumn: "列を非公開にする",
    makePublicColumn: "列を公開する",
    moveToDetail: "詳細に移動",
    showAsColumn: "列として表示",
    filterPlaceholder: "検索...",
    removeRows: "行を削除",
    showLabel: "表示",
    entriesLabel: "件",
    visualizer_text: "テキスト",
    visualizer_wordcloud: "ワードクラウド",
    visualizer_histogram: "ヒストグラム",
    visualizer_number: "平均",
    visualizer_choices: "テーブル",
    visualizer_selectBase: "チャート",
    chartType_bar: "棒グラフ",
    chartType_vbar: "縦棒グラフ",
    chartType_stackedbar: "積み上げ棒グラフ",
    chartType_doughnut: "ドーナツチャート",
    chartType_pie: "円グラフ",
    chartType_scatter: "散布図",
    chartType_gauge: "ゲージ",
    chartType_bullet: "バレット",
    hideButton: "非表示",
    makePrivateButton: "非公開にする",
    makePublicButton: "公開する",
    showButton: "表示",
    filter: "フィルター",
    resetFilter: "フィルターをリセット",
    changeLocale: "言語を変更",
    clearButton: "クリア",
    addElement: "表示する質問を選択...",
    defaultOrder: "デフォルト順",
    ascOrder: "昇順",
    descOrder: "降順",
    showMinorColumns: "マイナー列を表示",
    otherCommentTitle: "その他のアイテムとコメント",
    showPercentages: "パーセンテージを表示",
    hidePercentages: "パーセンテージを非表示",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "プロットをPNGファイルとして保存",
    hideEmptyAnswers: "空の回答を非表示",
    showEmptyAnswers: "空の回答を表示",
    "topNValueText-1": "すべての回答",
    "topNValueText5": "上位5つの回答",
    "topNValueText10": "上位10の回答",
    "topNValueText20": "上位20の回答",
    hideMissingAnswers: "欠損値を非表示",
    showMissingAnswers: "欠損値を表示",
    missingAnswersLabel: "欠損値",
    noVisualizerForQuestion: "この質問タイプはまだ視覚化されていません",
    noResults: "まだ結果がありません",
    showPerValues: "値ごとに表示",
    showPerColumns: "列ごとに表示",
    answer: "回答",
    correctAnswer: "正解: ",
    percent: "パーセント",
    responses: "回答数"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["ja"] = japaneseStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["ja"] = "Japanese";


/***/ }),

/***/ "./src/analytics-localization/norwegian.ts":
/*!*************************************************!*\
  !*** ./src/analytics-localization/norwegian.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   norwegianStrings: () => (/* binding */ norwegianStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var norwegianStrings = {
    groupButton: "Grupper",
    ungroupButton: "Opphev gruppering",
    selectButton: "Velg",
    hideColumn: "Skjul kolonne",
    showColumn: "Vis kolonne",
    makePrivateColumn: "Gjør kolonne privat",
    makePublicColumn: "Gjør kolonne offentlig",
    moveToDetail: "Flytt til detaljert visning",
    showAsColumn: "Vis som kolonne",
    filterPlaceholder: "Søk...",
    removeRows: "Fjern rader",
    showLabel: "Vis",
    entriesLabel: "oppføringer",
    visualizer_text: "Tabellvisning",
    visualizer_wordcloud: "Ordsky",
    visualizer_histogram: "Histogram",
    visualizer_number: "Gjennomsnitt",
    visualizer_choices: "Bord",
    visualizer_selectBase: "Sjøkart",
    // visualizer_matrix: "Chart",
    chartType_bar: "Stolpediagram",
    chartType_vbar: "Vertikal stolpe",
    chartType_stackedbar: "Stablet stolpediagram",
    chartType_doughnut: "Hjuldiagram",
    chartType_pie: "Sektordiagram",
    chartType_scatter: "Punktdiagram",
    chartType_gauge: "Målediagram",
    chartType_bullet: "Kulediagram",
    hideButton: "Skjul",
    makePrivateButton: "Gjør privat",
    makePublicButton: "Gjør offentlig",
    showButton: "Vis",
    filter: "Filter",
    resetFilter: "Nullstill filter",
    changeLocale: "Bytt språk",
    clearButton: "Tøm",
    addElement: "Velg spørsmål...",
    defaultOrder: "Standard",
    ascOrder: "Stigende",
    descOrder: "Synkende",
    showMinorColumns: "Vis mindre kolonner",
    otherCommentTitle: "Annet og kommentarer",
    showPercentages: "Vis prosenter",
    hidePercentages: "Skjul prosenter",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Overgå",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Last ned plott som en PNG-fil",
    hideEmptyAnswers: "Skjul tomme svar",
    showEmptyAnswers: "Vis tomme svar",
    "topNValueText-1": "Alle svar",
    topNValueText5: "Topp 5 svar",
    topNValueText10: "Topp 10 svar",
    topNValueText20: "Topp 20 svar",
    hideMissingAnswers: "Skjul manglende svar",
    showMissingAnswers: "Vis manglende svar",
    missingAnswersLabel: "Mangler svar",
    noVisualizerForQuestion: "Denne spørsmålstypen er ikke visualisert ennå",
    noResults: "Det er ingen resultater ennå",
    showPerValues: "Per verdier",
    showPerColumns: "Per kolonner",
    answer: "Svare",
    correctAnswer: "Riktig svar: ",
    percent: "Prosent",
    responses: "Svar"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["no"] = norwegianStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["no"] = "Norsk";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.visualizer_histogram: "Histogram" => "Histogram"
// undefined.visualizer_number: "Average" => "Gjennomsnitt"
// undefined.visualizer_choices: "Table" => "Bord"
// undefined.visualizer_selectBase: "Chart" => "Sjøkart"
// undefined.chartType_vbar: "Vertical Bar" => "Vertikal stolpe"
// undefined.filter: "Filter" => "Filter"
// undefined.pdfDownloadCaption: "PDF" => "PDF"
// undefined.xlsxDownloadCaption: "Excel" => "Overgå"
// undefined.csvDownloadCaption: "CSV" => "CSV"
// undefined.saveDiagramAsPNG: "Download plot as a PNG file" => "Last ned plott som en PNG-fil"
// undefined.hideEmptyAnswers: "Hide empty answers" => "Skjul tomme svar"
// undefined.showEmptyAnswers: "Show empty answers" => "Vis tomme svar"
// undefined.topNValueText-1: "All answers" => "Alle svar"
// undefined.topNValueText5: "Top 5 answers" => "Topp 5 svar"
// undefined.topNValueText10: "Top 10 answers" => "Topp 10 svar"
// undefined.topNValueText20: "Top 20 answers" => "Topp 20 svar"
// undefined.hideMissingAnswers: "Hide missing answers" => "Skjul manglende svar"
// undefined.showMissingAnswers: "Show missing answers" => "Vis manglende svar"
// undefined.missingAnswersLabel: "Missing answers" => "Mangler svar"
// undefined.noVisualizerForQuestion: "This question type is not visualized yet" => "Denne spørsmålstypen er ikke visualisert ennå"
// undefined.noResults: "There are no results yet" => "Det er ingen resultater ennå"
// undefined.showPerValues: "Per Values" => "Per verdier"
// undefined.showPerColumns: "Per Columns" => "Per kolonner"
// undefined.answer: "Answer" => "Svare"
// undefined.correctAnswer: "Correct answer: " => "Riktig svar: "
// undefined.percent: "Percent" => "Prosent"
// undefined.responses: "Responses" => "Svar"


/***/ }),

/***/ "./src/analytics-localization/portuguese.ts":
/*!**************************************************!*\
  !*** ./src/analytics-localization/portuguese.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   portugueseStrings: () => (/* binding */ portugueseStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var portugueseStrings = {
    groupButton: "Agrupar Por Mim",
    ungroupButton: "Desagrupar Por Mim",
    selectButton: "Selecionar",
    hideColumn: "Esconder coluna",
    showColumn: "Mostrar coluna",
    makePrivateColumn: "Tornar coluna privada",
    makePublicColumn: "Tornar coluna pública",
    moveToDetail: "Mover para Detalhes",
    showAsColumn: "Mostrar como Coluna",
    filterPlaceholder: "Pesquisar...",
    removeRows: "Remover linhas",
    showLabel: "Mostrar",
    entriesLabel: "entradas",
    visualizer_text: "Textos em tabela",
    visualizer_wordcloud: "Nuvem de palavras",
    visualizer_histogram: "Histograma",
    visualizer_number: "Média",
    visualizer_choices: "Tabela",
    visualizer_selectBase: "Gráfico",
    // visualizer_matrix: "Chart",
    chartType_bar: "Barra",
    chartType_vbar: "Barra vertical",
    chartType_stackedbar: "Barra Empilhada",
    chartType_doughnut: "Rosca",
    chartType_pie: "Tarte",
    chartType_scatter: "Lastro",
    chartType_gauge: "Escala",
    chartType_bullet: "Bala",
    hideButton: "Esconder",
    makePrivateButton: "Tornar privado",
    makePublicButton: "Tornar público",
    showButton: "Mostrar",
    filter: "Filtrar",
    resetFilter: "Restaurar Filtro",
    changeLocale: "Mudar Localização",
    clearButton: "Limpar",
    addElement: "Escolher questão para mostrar...",
    defaultOrder: "Ordenação Padrão",
    ascOrder: "Ascendente",
    descOrder: "Descendente",
    showMinorColumns: "Mostrar colunas menores",
    otherCommentTitle: "Outros itens e comentários",
    showPercentages: "Mostrar percentuais",
    hidePercentages: "Esconder percentuais",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Baixar diagrama como PNG",
    hideEmptyAnswers: "Esconder perguntas vazias",
    showEmptyAnswers: "Mostrar perguntas vazias",
    "topNValueText-1": "Todas as respostas",
    topNValueText5: "Primeiras 5 respostas",
    topNValueText10: "Primeiras 10 respostas",
    topNValueText20: "Primeiras 20 respostas",
    hideMissingAnswers: "Ocultar perguntas não respondidas",
    showMissingAnswers: "Mostrar perguntas não respondidas",
    missingAnswersLabel: "Perguntas não respondidas",
    noVisualizerForQuestion: "Este tipo de pergunta ainda não foi visualizada",
    noResults: "Ainda não possui resultados",
    showPerValues: "Por valores",
    showPerColumns: "Por colunas",
    answer: "Resposta",
    correctAnswer: "Resposta correta: ",
    percent: "Percentagem",
    responses: "Respostas"
};
//Uncomment these two lines on creating a translation file. You should replace "en" and enStrings with your locale ("fr", "de" and so on) and your variable.
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["pt"] = portugueseStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["pt"] = "Português";


/***/ }),

/***/ "./src/analytics-localization/russian.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/russian.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   russianStrings: () => (/* binding */ russianStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");

var russianStrings = {
    groupButton: "Сгруппировать",
    ungroupButton: "Разгруппировать",
    selectButton: "Выбрать",
    hideColumn: "Скрыть столбец",
    showColumn: "Показать столбец",
    makePrivateColumn: "Сделать столбец приватным",
    makePublicColumn: "Сделать столбец публичным",
    moveToDetail: "Спрятать в раскрывающуюся секцию",
    showAsColumn: "Показать как столбец",
    filterPlaceholder: "Поиск...",
    removeRows: "Удалить строки",
    showLabel: "Показать",
    entriesLabel: "записей",
    visualizer_text: "Таблица",
    visualizer_wordcloud: "Облако тэгов",
    visualizer_histogram: "Гистограмма",
    visualizer_number: "Среднее значение",
    visualizer_choices: "Таблица",
    visualizer_selectBase: "Диаграмма",
    visualizer_matrix: "Диаграмма",
    chartType_bar: "Столбчатая диаграмма",
    chartType_vbar: "Вертикальная столбчатая диаграмма",
    chartType_stackedbar: "Столбчатая диаграмма с накоплением",
    chartType_doughnut: "Кольцевая диаграмма",
    chartType_pie: "Круговая диаграмма",
    chartType_scatter: "Точечная диаграмма",
    chartType_gauge: "Измерительная диаграмма",
    chartType_bullet: "Маркированная диаграмма",
    hideButton: "Скрыть",
    makePrivateButton: "Сделать приватным",
    makePublicButton: "Сделать публичным",
    showButton: "Показать",
    filter: "Фильтр",
    resetFilter: "Очистить фильтр",
    changeLocale: "Сменить язык",
    clearButton: "Очистить",
    addElement: "Выберите вопрос...",
    defaultOrder: "Порядок по умолчанию",
    ascOrder: "Сортировать по возрастанию",
    descOrder: "Сортировать по убыванию",
    showMinorColumns: "Показать второстепенные столбцы",
    otherCommentTitle: "Другое и комментарии",
    showPercentages: "Показать проценты",
    hidePercentages: "Скрыть проценты",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Скачать диаграмму в формате PNG",
    hideEmptyAnswers: "Скрыть пустые ответы",
    showEmptyAnswers: "Показать пустые ответы",
    "topNValueText-1": "Все ответы",
    topNValueText5: "Первые 5 ответов",
    topNValueText10: "Первые 10 ответов",
    topNValueText20: "Первые 20 ответов",
    hideMissingAnswers: "Скрыть отсутствующие ответы",
    showMissingAnswers: "Показать отсутствующие ответы",
    missingAnswersLabel: "Отсутствующие ответы",
    noVisualizerForQuestion: "Этот тип вопроса не поддерживается",
    noResults: "Результаты отсутствуют",
    showPerValues: "По значениям",
    showPerColumns: "По столбцам",
    answer: "Ответ",
    correctAnswer: "Правильный ответ: ",
    percent: "процентов",
    responses: "ответов"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["ru"] = russianStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["ru"] = "Русский";


/***/ }),

/***/ "./src/analytics-localization/spanish.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/spanish.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   spanishStrings: () => (/* binding */ spanishStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var spanishStrings = {
    groupButton: "Grupo Por Mí",
    ungroupButton: "Desagrupar por mí",
    selectButton: "Seleccionarme",
    hideColumn: "Ocultar columna",
    showColumn: "Mostrar columna",
    makePrivateColumn: "Hacer que la columna sea privada",
    makePublicColumn: "Hacer pública la columna",
    moveToDetail: "Mover al detalle",
    showAsColumn: "Mostrar como columna",
    filterPlaceholder: "Buscar ...",
    removeRows: "Eliminar filas",
    showLabel: "Mostrar",
    entriesLabel: "Entradas",
    visualizer_text: "Textos en tabla",
    visualizer_wordcloud: "Wordcloud",
    visualizer_histogram: "Histograma",
    visualizer_number: "Promedio",
    visualizer_choices: "Mesa",
    visualizer_selectBase: "Gráfico",
    // visualizer_matrix: "Chart",
    chartType_bar: "Bar",
    chartType_vbar: "Barra vertical",
    chartType_stackedbar: "Barra apilada",
    chartType_doughnut: "Donut",
    chartType_pie: "Pie",
    chartType_scatter: "Dispersión",
    chartType_gauge: "Gauge",
    chartType_bullet: "Bullet",
    hideButton: "Ocultar",
    makePrivateButton: "Hacer privado",
    makePublicButton: "Hacer público",
    showButton: "Mostrar",
    filter: "Filtro",
    resetFilter: "Restablecer filtro",
    changeLocale: "Cambiar configuración regional",
    clearButton: "Borrar",
    addElement: "Elija la pregunta para mostrar ...",
    defaultOrder: "Orden predeterminado",
    ascOrder: "Ascendente",
    descOrder: "Descendente",
    showMinorColumns: "Mostrar columnas secundarias",
    otherCommentTitle: "Otros elementos y comentarios",
    showPercentages: "Mostrar porcentajes",
    hidePercentages: "Ocultar porcentajes",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Descargar el gráfico como png",
    hideEmptyAnswers: "Ocultar respuestas vacías",
    showEmptyAnswers: "Mostrar respuestas vacías",
    "topNValueText-1": "Todas las respuestas",
    topNValueText5: "Las 5 respuestas principales",
    topNValueText10: "Las 10 respuestas principales",
    topNValueText20: "20 respuestas principales",
    hideMissingAnswers: "Ocultar las respuestas que faltan",
    showMissingAnswers: "Mostrar las respuestas que faltan",
    missingAnswersLabel: "Respuestas faltantes",
    noVisualizerForQuestion: "Este tipo de pregunta aún no se visualiza",
    noResults: "Aún no hay resultados",
    showPerValues: "Por valores",
    showPerColumns: "Por columnas",
    answer: "Respuesta",
    correctAnswer: "Respuesta correcta: ",
    percent: "Por ciento",
    responses: "Respuestas"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["es"] = spanishStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["es"] = "Español";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.groupButton: "Group By Me" => "Grupo Por Mí"
// undefined.entriesLabel: "entries" => "Entradas"
// undefined.visualizer_histogram: "Histogram" => "Histograma"
// undefined.visualizer_number: "Average" => "Promedio"
// undefined.visualizer_choices: "Table" => "Mesa"
// undefined.visualizer_selectBase: "Chart" => "Gráfico"
// undefined.chartType_vbar: "Vertical Bar" => "Barra vertical"
// undefined.hideMissingAnswers: "Hide missing answers" => "Ocultar las respuestas que faltan"
// undefined.showMissingAnswers: "Show missing answers" => "Mostrar las respuestas que faltan"
// undefined.missingAnswersLabel: "Missing answers" => "Respuestas faltantes"
// undefined.showPerValues: "Per Values" => "Por valores"
// undefined.showPerColumns: "Per Columns" => "Por columnas"
// undefined.answer: "Answer" => "Respuesta"
// undefined.correctAnswer: "Correct answer: " => "Respuesta correcta: "
// undefined.percent: "Percent" => "Por ciento"
// undefined.responses: "Responses" => "Respuestas"


/***/ }),

/***/ "./src/localizationManager.ts":
/*!************************************!*\
  !*** ./src/localizationManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   localization: () => (/* binding */ localization),
/* harmony export */   surveyStrings: () => (/* binding */ surveyStrings)
/* harmony export */ });
/* harmony import */ var _analytics_localization_english__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./analytics-localization/english */ "./src/analytics-localization/english.ts");

var localization = {
    currentLocaleValue: "",
    defaultLocaleValue: "en",
    locales: {},
    localeNames: {},
    supportedLocales: [],
    get currentLocale() {
        return this.currentLocaleValue === this.defaultLocaleValue
            ? ""
            : this.currentLocaleValue;
    },
    set currentLocale(val) {
        this.currentLocaleValue = val;
    },
    get defaultLocale() {
        return this.defaultLocaleValue;
    },
    set defaultLocale(val) {
        this.defaultLocaleValue = val;
    },
    getString: function (strName) {
        var loc = this.currentLocale
            ? this.locales[this.currentLocale]
            : this.locales[this.defaultLocale];
        if (!loc || !loc[strName])
            loc = this.locales[this.defaultLocale];
        var result = loc[strName];
        if (result === undefined) {
            result = this.locales["en"][strName] || strName;
        }
        return result;
    },
    getLocales: function () {
        var res = [];
        res.push("");
        if (this.supportedLocales && this.supportedLocales.length > 0) {
            for (var i = 0; i < this.supportedLocales.length; i++) {
                res.push(this.supportedLocales[i]);
            }
        }
        else {
            for (var key in this.locales) {
                res.push(key);
            }
        }
        res.sort();
        return res;
    }
};
var surveyStrings = _analytics_localization_english__WEBPACK_IMPORTED_MODULE_0__.englishStrings;
localization.locales["en"] = _analytics_localization_english__WEBPACK_IMPORTED_MODULE_0__.englishStrings;
localization.localeNames["en"] = "English";


/***/ }),

/***/ "./src/tables/columnbuilder.ts":
/*!*************************************!*\
  !*** ./src/tables/columnbuilder.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnsBuilderFactory: () => (/* binding */ ColumnsBuilderFactory),
/* harmony export */   CompositeColumnsBuilder: () => (/* binding */ CompositeColumnsBuilder),
/* harmony export */   CustomColumnsBuilder: () => (/* binding */ CustomColumnsBuilder),
/* harmony export */   DefaultColumnsBuilder: () => (/* binding */ DefaultColumnsBuilder),
/* harmony export */   FileColumnsBuilder: () => (/* binding */ FileColumnsBuilder),
/* harmony export */   ImageColumnsBuilder: () => (/* binding */ ImageColumnsBuilder),
/* harmony export */   MatrixColumnsBuilder: () => (/* binding */ MatrixColumnsBuilder),
/* harmony export */   MatrixDropdownColumnBuilder: () => (/* binding */ MatrixDropdownColumnBuilder)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _columns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./columns */ "./src/tables/columns.ts");


var DefaultColumnsBuilder = /** @class */ (function () {
    function DefaultColumnsBuilder() {
    }
    DefaultColumnsBuilder.prototype.createColumn = function (question, table) {
        return new _columns__WEBPACK_IMPORTED_MODULE_1__.BaseColumn(question, table);
    };
    DefaultColumnsBuilder.prototype.buildColumnsCore = function (question, table) {
        var columns = [];
        columns.push(this.createColumn(question, table));
        return columns;
    };
    DefaultColumnsBuilder.prototype.buildColumns = function (question, table) {
        var columns = this.buildColumnsCore(question, table);
        if (question.hasComment ||
            (question.hasOther && question["getStoreOthersAsComment"]())) {
            columns.push(new _columns__WEBPACK_IMPORTED_MODULE_1__.CommentColumn(question, table));
        }
        return columns;
    };
    return DefaultColumnsBuilder;
}());

var ColumnsBuilderFactory = /** @class */ (function () {
    function ColumnsBuilderFactory() {
        this.columnsBuilders = {};
        this.defaultColumnsBuilder = new DefaultColumnsBuilder();
    }
    ColumnsBuilderFactory.prototype.registerBuilderColumn = function (type, columnsBuilder) {
        this.columnsBuilders[type] = columnsBuilder;
    };
    ColumnsBuilderFactory.prototype.getColumnsBuilder = function (type) {
        return this.columnsBuilders[type] || this.defaultColumnsBuilder;
    };
    ColumnsBuilderFactory.Instance = new ColumnsBuilderFactory();
    return ColumnsBuilderFactory;
}());

var MatrixColumnsBuilder = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MatrixColumnsBuilder, _super);
    function MatrixColumnsBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MatrixColumnsBuilder.prototype.buildColumnsCore = function (questionBase, table) {
        var question = questionBase;
        var columns = [];
        question.rows.forEach(function (row) {
            columns.push(new _columns__WEBPACK_IMPORTED_MODULE_1__.MatrixColumn(question, row, table));
        });
        return columns;
    };
    return MatrixColumnsBuilder;
}(DefaultColumnsBuilder));

ColumnsBuilderFactory.Instance.registerBuilderColumn("matrix", new MatrixColumnsBuilder());
var ImageColumnsBuilder = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ImageColumnsBuilder, _super);
    function ImageColumnsBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageColumnsBuilder.prototype.createColumn = function (question, table) {
        return new _columns__WEBPACK_IMPORTED_MODULE_1__.ImageColumn(question, table);
    };
    return ImageColumnsBuilder;
}(DefaultColumnsBuilder));

ColumnsBuilderFactory.Instance.registerBuilderColumn("signaturepad", new ImageColumnsBuilder());
var FileColumnsBuilder = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FileColumnsBuilder, _super);
    function FileColumnsBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FileColumnsBuilder.prototype.createColumn = function (question, table) {
        return new _columns__WEBPACK_IMPORTED_MODULE_1__.FileColumn(question, table);
    };
    return FileColumnsBuilder;
}(DefaultColumnsBuilder));

ColumnsBuilderFactory.Instance.registerBuilderColumn("file", new FileColumnsBuilder());
var MatrixDropdownColumnBuilder = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MatrixDropdownColumnBuilder, _super);
    function MatrixDropdownColumnBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MatrixDropdownColumnBuilder.prototype.buildColumns = function (questionBase, table) {
        var question = questionBase;
        var columns = [];
        question.rows.forEach(function (row) {
            question.columns.forEach(function (col) {
                columns.push(new _columns__WEBPACK_IMPORTED_MODULE_1__.MatrixDropdownColumn(question, row, col, table));
            });
        });
        return columns;
    };
    return MatrixDropdownColumnBuilder;
}(DefaultColumnsBuilder));

ColumnsBuilderFactory.Instance.registerBuilderColumn("matrixdropdown", new MatrixDropdownColumnBuilder());
var CustomColumnsBuilder = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CustomColumnsBuilder, _super);
    function CustomColumnsBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomColumnsBuilder.prototype.createColumn = function (question, table) {
        return new _columns__WEBPACK_IMPORTED_MODULE_1__.CustomQuestionColumn(question, table);
    };
    return CustomColumnsBuilder;
}(DefaultColumnsBuilder));

ColumnsBuilderFactory.Instance.registerBuilderColumn("custom", new CustomColumnsBuilder());
var CompositeColumnsBuilder = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CompositeColumnsBuilder, _super);
    function CompositeColumnsBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CompositeColumnsBuilder.prototype.createColumn = function (question, table) {
        return new _columns__WEBPACK_IMPORTED_MODULE_1__.CompositeQuestionColumn(question, table);
    };
    return CompositeColumnsBuilder;
}(DefaultColumnsBuilder));

ColumnsBuilderFactory.Instance.registerBuilderColumn("composite", new CompositeColumnsBuilder());


/***/ }),

/***/ "./src/tables/columns.ts":
/*!*******************************!*\
  !*** ./src/tables/columns.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseColumn: () => (/* binding */ BaseColumn),
/* harmony export */   CommentColumn: () => (/* binding */ CommentColumn),
/* harmony export */   CompositeQuestionColumn: () => (/* binding */ CompositeQuestionColumn),
/* harmony export */   CustomQuestionColumn: () => (/* binding */ CustomQuestionColumn),
/* harmony export */   DefaultColumn: () => (/* binding */ DefaultColumn),
/* harmony export */   FileColumn: () => (/* binding */ FileColumn),
/* harmony export */   ImageColumn: () => (/* binding */ ImageColumn),
/* harmony export */   MatrixColumn: () => (/* binding */ MatrixColumn),
/* harmony export */   MatrixDropdownColumn: () => (/* binding */ MatrixDropdownColumn)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ "./src/tables/config.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./table */ "./src/tables/table.ts");





var BaseColumn = /** @class */ (function () {
    function BaseColumn(question, table) {
        this.question = question;
        this.table = table;
        this.isVisible = true;
        this.isPublic = true;
        this.location = _config__WEBPACK_IMPORTED_MODULE_3__.QuestionLocation.Column;
        this.dataType = this.getDataType();
    }
    Object.defineProperty(BaseColumn.prototype, "name", {
        get: function () {
            if (!this.nameValue) {
                this.name = this.getName();
            }
            return this.nameValue;
        },
        set: function (val) {
            this.nameValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseColumn.prototype, "displayName", {
        get: function () {
            if (!this.displayNameValue) {
                this.displayName = this.getDisplayName();
            }
            return this.displayNameValue;
        },
        set: function (val) {
            this.displayNameValue = val;
        },
        enumerable: false,
        configurable: true
    });
    BaseColumn.prototype.getDisplayName = function () {
        return this.table.useNamesAsTitles
            ? this.question.name
            : (this.question.title || "").trim() || this.question.name;
    };
    BaseColumn.prototype.getName = function () {
        return this.question.name;
    };
    BaseColumn.prototype.getDataType = function () {
        return _config__WEBPACK_IMPORTED_MODULE_3__.ColumnDataType.Text;
    };
    BaseColumn.prototype.getDisplayValueCore = function (data) {
        return data[this.name];
    };
    BaseColumn.prototype.setupReadyChangedCallback = function (table, question) {
        if (!!question) {
            var onReadyChangedCallback_1 = function (sender, options) {
                if (options.isReady) {
                    table.refresh(!table.isInitTableDataProcessing);
                    sender.onReadyChanged.remove(onReadyChangedCallback_1);
                }
            };
            if (!question.isReady) {
                question.onReadyChanged.add(onReadyChangedCallback_1);
            }
        }
    };
    BaseColumn.prototype.getDisplayValue = function (data, table, options) {
        var displayValue = this.getDisplayValueCore(data);
        var question = this.question;
        if (!!question) {
            if (options.useValuesAsLabels) {
                displayValue = question.value;
            }
            else {
                displayValue = question.displayValue;
            }
        }
        return displayValue;
    };
    BaseColumn.prototype.formatDisplayValue = function (displayValue) {
        return typeof displayValue === "string"
            ? displayValue
            : JSON.stringify(displayValue) || "";
    };
    BaseColumn.prototype.getCellData = function (table, data) {
        var displayValue = this.getDisplayValue(data, table, table.options);
        this.setupReadyChangedCallback(table, this.question);
        return { question: this.question, displayValue: this.formatDisplayValue(displayValue) };
    };
    BaseColumn.prototype.toJSON = function () {
        return {
            name: this.name,
            displayName: this.displayName,
            dataType: this.dataType,
            isVisible: this.isVisible,
            isPublic: this.isPublic,
            location: this.location
        };
    };
    BaseColumn.prototype.fromJSON = function (data) {
        var _this = this;
        Object.keys(data).forEach(function (key) {
            _this[key] = data[key];
        });
    };
    return BaseColumn;
}());

var DefaultColumn = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DefaultColumn, _super);
    function DefaultColumn() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultColumn.prototype.getDisplayValue = function (data, table, options) {
        return this.getDisplayValueCore(data);
    };
    return DefaultColumn;
}(BaseColumn));

var CommentColumn = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CommentColumn, _super);
    function CommentColumn() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommentColumn.prototype.getName = function () {
        return "".concat(this.question.name).concat(survey_core__WEBPACK_IMPORTED_MODULE_1__.settings.commentPrefix);
    };
    CommentColumn.prototype.getDisplayName = function () {
        return this.question.hasOther
            ? this.question.otherText
            : this.question.commentText;
    };
    CommentColumn.prototype.getDisplayValue = function (data, table, options) {
        return this.question.comment;
    };
    return CommentColumn;
}(BaseColumn));

var MatrixColumn = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MatrixColumn, _super);
    function MatrixColumn(question, row, table) {
        var _this = this;
        var _a;
        _this = _super.call(this, question, table) || this;
        _this.row = row;
        _this.valueName = _this.question.name;
        _this.valuePath = (_a = _this.row) === null || _a === void 0 ? void 0 : _a.value;
        return _this;
    }
    MatrixColumn.prototype.getName = function () {
        var _a;
        return this.question.name + "." + ((_a = this.row) === null || _a === void 0 ? void 0 : _a.value);
    };
    MatrixColumn.prototype.getDisplayName = function () {
        var table = this.table;
        var question = this.question;
        var row = this.row;
        return (table.useNamesAsTitles
            ? question.name
            : (question.title || "").trim() || question.name) + " - " + (table.useNamesAsTitles ? row === null || row === void 0 ? void 0 : row.value : row === null || row === void 0 ? void 0 : row.locText.textOrHtml);
    };
    MatrixColumn.prototype.getDisplayValue = function (data, table, options) {
        var displayValue = data[this.valueName];
        if (this.valuePath && typeof displayValue === "object") {
            displayValue = displayValue[this.valuePath];
            if (displayValue !== undefined) {
                var choiceValue = survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue.getItemByValue(this.question.columns, displayValue);
                if (!!choiceValue) {
                    displayValue = options.useValuesAsLabels ? choiceValue.value : choiceValue.locText.textOrHtml;
                }
            }
        }
        return displayValue;
    };
    return MatrixColumn;
}(BaseColumn));

var ImageColumn = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ImageColumn, _super);
    function ImageColumn() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageColumn.prototype.getDataType = function () {
        return _config__WEBPACK_IMPORTED_MODULE_3__.ColumnDataType.Image;
    };
    return ImageColumn;
}(BaseColumn));

var FileColumn = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FileColumn, _super);
    function FileColumn() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FileColumn.prototype.getDataType = function () {
        return _config__WEBPACK_IMPORTED_MODULE_3__.ColumnDataType.FileLink;
    };
    FileColumn.prototype.getDisplayValue = function (data, table, options) {
        var displayValue = this.getDisplayValueCore(data);
        if (Array.isArray(displayValue)) {
            displayValue = _table__WEBPACK_IMPORTED_MODULE_4__.Table.showFilesAsImages ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__.createImagesContainer)(displayValue).outerHTML : (0,_utils__WEBPACK_IMPORTED_MODULE_2__.createLinksContainer)(displayValue).outerHTML;
        }
        return displayValue;
    };
    return FileColumn;
}(BaseColumn));

var MatrixDropdownColumn = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MatrixDropdownColumn, _super);
    function MatrixDropdownColumn(question, row, col, table) {
        var _this = _super.call(this, question, table) || this;
        _this.row = row;
        _this.col = col;
        _this.rowValue = _this.row.value;
        _this.colName = _this.col.name;
        return _this;
    }
    MatrixDropdownColumn.prototype.getName = function () {
        return this.question.name + "." + this.row.value + "." + this.col.name;
    };
    MatrixDropdownColumn.prototype.getDisplayName = function () {
        var table = this.table;
        var question = this.question;
        return (this.table.useNamesAsTitles
            ? question.name
            : (question.title || "").trim() || question.name) + " - " + (table.useNamesAsTitles ? this.row.value : this.row.locText.textOrHtml) + " - " + (table.useNamesAsTitles ? this.col.name : this.col.locTitle.textOrHtml);
    };
    MatrixDropdownColumn.prototype.getDisplayValue = function (data, table, options) {
        var _this = this;
        var displayValue = data[this.question.name];
        var question = this.question;
        if (this.rowValue && this.colName && typeof displayValue === "object") {
            var _a = [this.rowValue, this.colName], rowId = _a[0], colId = _a[1];
            displayValue = question.value;
            if (!options.useValuesAsLabels) {
                displayValue = question.displayValue;
                rowId = question.rows.filter(function (row) { return row.value === _this.rowValue; })[0].text;
                colId = question.getColumnByName(this.colName).title;
            }
            displayValue = (displayValue[rowId] && displayValue[rowId][colId]) || "";
        }
        return displayValue;
    };
    return MatrixDropdownColumn;
}(BaseColumn));

var CustomQuestionColumn = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CustomQuestionColumn, _super);
    function CustomQuestionColumn() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomQuestionColumn.prototype.getCellData = function (table, data) {
        this.setupReadyChangedCallback(table, this.question.contentQuestion);
        return _super.prototype.getCellData.call(this, table, data);
    };
    return CustomQuestionColumn;
}(BaseColumn));

var CompositeQuestionColumn = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CompositeQuestionColumn, _super);
    function CompositeQuestionColumn() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CompositeQuestionColumn.prototype.getCellData = function (table, data) {
        var _this = this;
        var questionList = [];
        this.question.contentPanel.addQuestionsToList(questionList);
        questionList.forEach(function (question) {
            _this.setupReadyChangedCallback(table, question);
        });
        return _super.prototype.getCellData.call(this, table, data);
    };
    return CompositeQuestionColumn;
}(BaseColumn));



/***/ }),

/***/ "./src/tables/config.ts":
/*!******************************!*\
  !*** ./src/tables/config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnDataType: () => (/* binding */ ColumnDataType),
/* harmony export */   QuestionLocation: () => (/* binding */ QuestionLocation)
/* harmony export */ });
var QuestionLocation;
(function (QuestionLocation) {
    QuestionLocation[QuestionLocation["Column"] = 0] = "Column";
    QuestionLocation[QuestionLocation["Row"] = 1] = "Row";
})(QuestionLocation || (QuestionLocation = {}));
var ColumnDataType;
(function (ColumnDataType) {
    ColumnDataType[ColumnDataType["Text"] = 0] = "Text";
    ColumnDataType[ColumnDataType["FileLink"] = 1] = "FileLink";
    ColumnDataType[ColumnDataType["Image"] = 2] = "Image";
})(ColumnDataType || (ColumnDataType = {}));


/***/ }),

/***/ "./src/tables/datatables.ts":
/*!**********************************!*\
  !*** ./src/tables/datatables.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataTables: () => (/* binding */ DataTables),
/* harmony export */   DatatablesRow: () => (/* binding */ DatatablesRow)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./table */ "./src/tables/table.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ "./src/tables/config.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");





var styles = __webpack_require__(/*! ./datatables.scss */ "./src/tables/datatables.scss");
if (!!document) {
    var svgTemplate = __webpack_require__(/*! ../svgbundle.html */ "./src/svgbundle.html");
    var templateHolder = document.createElement("div");
    templateHolder.style.display = "none";
    templateHolder.innerHTML = svgTemplate.default;
    document.head.appendChild(templateHolder);
}
var jQuery = window["jQuery"];
var DataTables = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DataTables, _super);
    function DataTables(survey, data, options, _columnsData) {
        if (_columnsData === void 0) { _columnsData = []; }
        var _this = _super.call(this, survey, data, options, _columnsData) || this;
        _this.currentPageNumber = 0;
        /**
         * The event is fired columns configuration has been changed.
         * <br/> sender the datatables adapter
         * <br/> options.survey current survey
         * @see getColumns
         */
        _this.onColumnsReorder = new survey_core__WEBPACK_IMPORTED_MODULE_2__.Event();
        return _this;
    }
    DataTables.initJQuery = function ($) {
        jQuery = $;
    };
    Object.defineProperty(DataTables, "haveCommercialLicense", {
        set: function (val) {
            _table__WEBPACK_IMPORTED_MODULE_1__.Table.haveCommercialLicense = val;
        },
        enumerable: false,
        configurable: true
    });
    DataTables.prototype.destroy = function () {
        if (!this.renderResult)
            return;
        var tableNode = this.renderResult.children[0];
        if (jQuery.fn.DataTable.isDataTable(tableNode)) {
            jQuery(tableNode).DataTable().destroy();
        }
        this.datatableApi = undefined;
        _super.prototype.destroy.call(this);
    };
    DataTables.prototype.setColumnVisibility = function (columnName, isVisible) {
        _super.prototype.setColumnVisibility.call(this, columnName, isVisible);
        this.datatableApi.column(columnName + ":name").visible(isVisible);
    };
    DataTables.prototype.setColumnLocation = function (columnName, location) {
        _super.prototype.setColumnLocation.call(this, columnName, location);
        var column = this.datatableApi.column(columnName + ":name");
        var isColumnLocation = location == _config__WEBPACK_IMPORTED_MODULE_3__.QuestionLocation.Column;
        column.visible(isColumnLocation);
    };
    DataTables.prototype.applyFilter = function (value) {
        this.datatableApi.search(value).draw(false);
    };
    DataTables.prototype.applyColumnFilter = function (columnName, value) {
        var column = this.datatableApi.column(columnName + ":name");
        if (column.search() !== value) {
            column.search(value).draw(false);
        }
    };
    DataTables.prototype.sortByColumn = function (columnName, direction) {
        var column = this.datatableApi.column(columnName + ":name");
        column.order(direction).draw(false);
    };
    DataTables.prototype.setPageSize = function (value) {
        _super.prototype.setPageSize.call(this, value);
        if (this.isRendered) {
            this.datatableApi.page.len(value).draw(false);
        }
    };
    DataTables.prototype.setPageNumber = function (value) {
        _super.prototype.setPageNumber.call(this, value);
        if (this.isRendered) {
            this.datatableApi.page(value).draw(false);
        }
    };
    DataTables.prototype.getPageNumber = function () {
        if (!this.isRendered) {
            return 0;
        }
        return this.datatableApi.page();
    };
    DataTables.prototype.render = function (targetNode) {
        var _this = this;
        _super.prototype.render.call(this, targetNode);
        var self = this;
        if (typeof targetNode === "string") {
            targetNode = document.getElementById(targetNode);
        }
        targetNode.className += " sa-table sa-datatables";
        var tableNode = (_utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("table", ""));
        var columns = this.getColumns();
        var columnsData = columns.map(function (c) { return c.data; });
        var dtButtonClass = "sa-table__btn sa-table__btn--small sa-table__btn--gray";
        var options = jQuery.extend(true, {
            buttons: [
                { extend: "copy", className: dtButtonClass },
                { extend: "csv", className: dtButtonClass },
                { extend: "print", className: dtButtonClass },
            ],
            dom: 'B<"sa-table__header-extensions">prtip',
            // ordering: false,
            data: this.tableData,
            pageLength: this.currentPageSize,
            responsive: false,
            scrollX: true,
            columns: columns,
            colReorder: {
                fixedColumnsLeft: 1,
                realtime: false,
            },
            //orderFixed: [[1, "asc"]],
            language: {
                sSearch: " ",
                searchPlaceholder: "Search...",
                sLengthMenu: "Show _MENU_ entries",
                paginate: {
                    previous: " ",
                    next: " ",
                },
            },
            select: "api",
            headerCallback: function (thead, data, start, end, display) {
                var datatableApi = jQuery(tableNode).dataTable().api();
                var self = _this;
                datatableApi
                    .columns()
                    .eq(0)
                    .each(function (index) {
                    var $thNode = jQuery(datatableApi.columns(index).header());
                    $thNode.unbind("click.DT");
                    if (!!columnsData[index] && $thNode.has("button").length === 0) {
                        var container = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("div", "sa-table__action-container");
                        self.extensions.render(container, "column", {
                            columnName: columnsData[index],
                        });
                        container.onmousedown = function (e) {
                            if (!self.isColumnReorderEnabled) {
                                e.stopPropagation();
                            }
                            else {
                                _this.disableColumnReorder();
                            }
                        };
                    }
                    $thNode.prepend(container);
                });
            },
        }, this._options);
        targetNode.appendChild(tableNode);
        tableNode.className = "sa-datatables__table display responsive dataTable";
        var datatableApiRef = (this.datatableApi = jQuery(tableNode).DataTable(options));
        var extensionsContainer = jQuery("div.sa-table__header-extensions")[0];
        // this.onTableToolsCreated.fire(this, { extensions: extensions });
        this.extensions.render(extensionsContainer, "header");
        datatableApiRef.page(self.currentPageNumber);
        this.datatableApi.rowGroup().enable(false).draw(false);
        datatableApiRef.on("column-reorder", function (e, settings, details) {
            _this.moveColumn(details.from - 1, details.to - 1);
            _this.disableColumnReorder();
            _this.onColumnsReorder.fire(_this, { columns: _this.columns });
        });
        datatableApiRef
            .rows()
            .eq(0)
            .each(function (index) {
            var row = datatableApiRef.row(index);
            var detailsTr = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("tr");
            var detailsTd = (_utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("td", "sa-datatables__details-container"));
            detailsTr.appendChild(detailsTd);
            var rowElement = row.node();
            var firstCell = row.cell(row.index(), 0).node();
            var tableRow = new DatatablesRow(_this, firstCell, detailsTd, row);
            tableRow.onToggleDetails.add(function (sender, options) {
                if (options.isExpanded) {
                    detailsTd.colSpan = rowElement.childElementCount;
                    rowElement.parentNode.insertBefore(detailsTr, rowElement.nextSibling);
                }
                else {
                    if (!!detailsTr.parentNode) {
                        detailsTr.parentNode.removeChild(detailsTr);
                    }
                }
            });
            _this._rows.push(tableRow);
            tableRow.render();
        });
        datatableApiRef.draw(false);
        this.renderResult = targetNode;
    };
    DataTables.prototype.getColumns = function () {
        var _this = this;
        var columns = this.columns.map(function (column) {
            var question = _this.survey.getQuestionByName(column.name);
            var columnTitle = (question && (_this.options.useNamesAsTitles ? question.name : question.title)) || column.displayName;
            return {
                name: column.name,
                data: column.name,
                sTitle: (jQuery === null || jQuery === void 0 ? void 0 : jQuery.fn.dataTable.render.text().display(columnTitle)) || columnTitle,
                visible: _this.isColumnVisible(column),
                orderable: false,
                defaultContent: "",
                width: typeof column.width == "number" ? column.width + "px" : column.width,
                render: function (_data, _type, row) {
                    var value = row[column.name];
                    if (column.dataType === _config__WEBPACK_IMPORTED_MODULE_3__.ColumnDataType.FileLink) {
                        return value;
                    }
                    if (column.dataType === _config__WEBPACK_IMPORTED_MODULE_3__.ColumnDataType.Image) {
                        return "<image src='" + value + "'/>";
                    }
                    return typeof value === "string"
                        ? jQuery("<div>").text(value).html()
                        : JSON.stringify(value);
                },
            };
        });
        return [
            {
                orderable: false,
                data: null,
                defaultContent: "",
            },
        ].concat(columns);
    };
    DataTables.prototype.layout = function () {
        !!this.datatableApi && this.datatableApi.columns.adjust();
    };
    return DataTables;
}(_table__WEBPACK_IMPORTED_MODULE_1__.Table));

var DatatablesRow = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DatatablesRow, _super);
    function DatatablesRow(table, extensionsContainer, detailsContainer, _innerRow) {
        var _this = _super.call(this, table, extensionsContainer, detailsContainer) || this;
        _this.table = table;
        _this.extensionsContainer = extensionsContainer;
        _this.detailsContainer = detailsContainer;
        _this._innerRow = _innerRow;
        _this.rowElement = _innerRow.node();
        _this.rowData = _innerRow.data();
        _this._innerRow = _this._innerRow.row(_this.rowElement);
        table.onColumnsReorder.add(function () {
            _this.render();
        });
        return _this;
    }
    Object.defineProperty(DatatablesRow.prototype, "innerRow", {
        get: function () {
            return this._innerRow.row(this.rowElement);
        },
        enumerable: false,
        configurable: true
    });
    DatatablesRow.prototype.getElement = function () {
        return this.rowElement;
    };
    DatatablesRow.prototype.getRowData = function () {
        return this.rowData;
    };
    DatatablesRow.prototype.getDataPosition = function () {
        return this.innerRow.index();
    };
    DatatablesRow.prototype.remove = function () {
        this.innerRow.remove().draw();
        _super.prototype.remove.call(this);
    };
    return DatatablesRow;
}(_table__WEBPACK_IMPORTED_MODULE_1__.TableRow));



/***/ }),

/***/ "./src/tables/extensions/columnextensions.ts":
/*!***************************************************!*\
  !*** ./src/tables/extensions/columnextensions.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ "./src/utils/index.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _tableextensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tableextensions */ "./src/tables/extensions/tableextensions.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/tables/config.ts");




_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "column",
    name: "drag",
    visibleIndex: 0,
    render: function (table, options) {
        var btn = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("button", "sa-table__svg-button sa-table__drag-button");
        btn.appendChild(_utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createSvgElement("drag"));
        btn.onmousedown = function (e) {
            table.enableColumnReorder();
        };
        return btn;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "column",
    name: "sort",
    visibleIndex: 1,
    render: function (table, options) {
        var descTitle = _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("descOrder");
        var ascTitle = _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("ascOrder");
        var btn = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createSvgButton("sorting");
        btn.title = "";
        var direction = "asc";
        btn.onclick = function () {
            if (direction == "asc") {
                btn.title = descTitle;
                direction = "desc";
            }
            else {
                btn.title = ascTitle;
                direction = "asc";
            }
            table.sortByColumn(options.columnName, direction);
        };
        btn.ondrag = function (e) {
            e.stopPropagation();
        };
        return btn;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "column",
    name: "hide",
    visibleIndex: 2,
    render: function (table, options) {
        var btn = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createSvgButton("hide");
        btn.title = _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("hideColumn");
        btn.onclick = function () {
            table.setColumnVisibility(options.columnName, false);
        };
        return btn;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "column",
    name: "movetodetails",
    visibleIndex: 3,
    render: function (table, options) {
        var button = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createSvgButton("movetodetails");
        button.title = _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("moveToDetail");
        button.onclick = function (e) {
            e.stopPropagation();
            table.setColumnLocation(options.columnName, _config__WEBPACK_IMPORTED_MODULE_3__.QuestionLocation.Row);
        };
        return button;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "column",
    name: "filter",
    visibleIndex: 4,
    render: function (table, options) {
        var el = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createInput("sa-table__filter", _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("filterPlaceholder"));
        el.onclick = function (e) { return e.stopPropagation(); };
        el.onchange = function (e) {
            table.applyColumnFilter(options.columnName, el.value);
        };
        return el;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "column",
    name: "makepublic",
    visibleIndex: -1,
    render: function (table, options) {
        var button = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("button");
        var makePrivateSvg = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createSvgElement("makeprivate");
        var makePublicSvg = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createSvgElement("makepublic");
        var column = table.getColumnByName(options.columnName);
        updateState(column);
        button.appendChild(makePrivateSvg);
        button.appendChild(makePublicSvg);
        button.onclick = function (e) {
            e.stopPropagation();
            column.isPublic = !column.isPublic;
            updateState(column);
            table.onPermissionsChangedCallback &&
                table.onPermissionsChangedCallback(table);
        };
        function updateState(column) {
            if (column.isPublic) {
                button.className = "sa-table__svg-button";
                button.title = _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("makePrivateColumn");
                makePrivateSvg.style.display = "none";
                makePublicSvg.style.display = "block";
            }
            else {
                button.className = "sa-table__svg-button sa-table__svg-button--active";
                button.title = _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("makePublicColumn");
                makePrivateSvg.style.display = "block";
                makePublicSvg.style.display = "none";
            }
        }
        return button;
    },
});


/***/ }),

/***/ "./src/tables/extensions/detailsextensions.ts":
/*!****************************************************!*\
  !*** ./src/tables/extensions/detailsextensions.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Details: () => (/* binding */ Details)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ "./src/utils/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/tables/config.ts");
/* harmony import */ var _tableextensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tableextensions */ "./src/tables/extensions/tableextensions.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../localizationManager */ "./src/localizationManager.ts");




var Details = /** @class */ (function () {
    function Details(table, row, targetNode) {
        var _this = this;
        this.table = table;
        this.row = row;
        this.targetNode = targetNode;
        this.location = "details";
        this.createShowAsColumnButton = function (columnName) {
            var button = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("button", "sa-table__btn sa-table__btn--gray");
            button.appendChild(document.createTextNode(_localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("showAsColumn")));
            button.onclick = function (e) {
                e.stopPropagation();
                _this.table.setColumnLocation(columnName, _config__WEBPACK_IMPORTED_MODULE_1__.QuestionLocation.Column);
            };
            return button;
        };
        this.detailsTable = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("table", "sa-table__detail-table");
        this.table.onColumnsLocationChanged.add(function () {
            _this.close();
        });
    }
    Details.prototype.open = function () {
        var _this = this;
        this.detailsTable.innerHTML = "";
        var rows = [];
        this.table.columns
            .filter(function (column) { return column.location === _config__WEBPACK_IMPORTED_MODULE_1__.QuestionLocation.Row && column; })
            .forEach(function (column) {
            var row = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("tr", "sa-table__detail");
            var td1 = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("td");
            td1.appendChild(document.createTextNode(column.displayName));
            var td2 = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("td");
            td2.textContent = _this.row.getRowData()[column.name];
            if (column.dataType === _config__WEBPACK_IMPORTED_MODULE_1__.ColumnDataType.Image) {
                td2.innerHTML = "<image src='" + td2.textContent + "'/>";
            }
            var td3 = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("td");
            td3.appendChild(_this.createShowAsColumnButton(column.name));
            row.appendChild(td1);
            row.appendChild(td2);
            row.appendChild(td3);
            rows.push(row);
        });
        var row = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("tr", "sa-table__detail");
        var td = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("td", "", { colSpan: 3 });
        var extensions = new _tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions(this.table);
        extensions.render(td, "details", { row: this.row });
        if (td.children.length != 0) {
            row.appendChild(td);
            rows.push(row);
        }
        rows.forEach(function (row) {
            _this.detailsTable.appendChild(row);
        });
        this.targetNode.appendChild(this.detailsTable);
    };
    Details.prototype.close = function () {
        if (!!this.detailsTable.parentNode) {
            this.detailsTable.parentNode.removeChild(this.detailsTable);
        }
    };
    return Details;
}());



/***/ }),

/***/ "./src/tables/extensions/headerextensions.ts":
/*!***************************************************!*\
  !*** ./src/tables/extensions/headerextensions.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeaderExtensions: () => (/* binding */ HeaderExtensions)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils/index.ts");
/* harmony import */ var _tableextensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tableextensions */ "./src/tables/extensions/tableextensions.ts");



_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "header",
    name: "filter",
    visibleIndex: 0,
    render: function (table) {
        var input = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createInput("sa-table__global-filter sa-table__header-extension", _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.getString("filterPlaceholder"));
        input.onchange = function (event) {
            table.applyFilter(event.target.value);
        };
        return input;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "header",
    name: "showcolumn",
    visibleIndex: 2,
    destroy: function () {
        this.onDestroy();
    },
    render: function (table) {
        var dropdown = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("select", "sa-table__show-column sa-table__header-extension");
        function update() {
            var hiddenColumns = table.columns.filter(function (column) { return !column.isVisible; });
            if (hiddenColumns.length == 0) {
                dropdown.style.display = "none";
                return;
            }
            dropdown.style.display = "inline-block";
            dropdown.innerHTML = "";
            var option = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("option", "", {
                text: _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.getString("showColumn"),
                disabled: true,
                selected: true,
            });
            dropdown.appendChild(option);
            hiddenColumns.forEach(function (column) {
                var text = column.displayName || column.name;
                if (!!text && text.length > 20) {
                    text = text.substring(0, 20) + "...";
                }
                var option = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("option", "", {
                    text: text,
                    title: column.displayName,
                    value: column.name,
                });
                dropdown.appendChild(option);
            });
        }
        dropdown.onchange = function (e) {
            var val = e.target.value;
            e.stopPropagation();
            if (!val)
                return;
            table.setColumnVisibility(val, true);
        };
        update();
        var onVisibilityChangedCallback = function () {
            update();
        };
        table.onColumnsVisibilityChanged.add(onVisibilityChangedCallback);
        this.onDestroy = function () {
            table.onColumnsVisibilityChanged.remove(onVisibilityChangedCallback);
        };
        return dropdown;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "header",
    name: "showentries",
    visibleIndex: 3,
    render: function (table) {
        function getEntriesDropdown(table) {
            var el = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("select");
            var optionsValues = table.paginationSizeSelector || ["1", "5", "10", "25", "50", "75", "100"];
            optionsValues.forEach(function (val) {
                var option = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("option", "", {
                    value: val,
                    text: val,
                });
                el.appendChild(option);
            });
            el.value = String(table.getPageSize());
            el.onchange = function () {
                table.setPageSize(Number(el.value));
            };
            return el;
        }
        var selectorContainer = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("div", "sa-table__entries");
        var spaceSpan = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("span", "sa-table__header-space");
        var showSpan = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("span", "sa-table__entries-label sa-table__entries-label--right", {
            innerText: _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.getString("showLabel"),
        });
        var entriesSpan = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("span", "sa-table__entries-label sa-table__entries-label--left", {
            innerText: _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.getString("entriesLabel"),
        });
        selectorContainer.appendChild(spaceSpan);
        selectorContainer.appendChild(showSpan);
        selectorContainer.appendChild(getEntriesDropdown(table));
        selectorContainer.appendChild(entriesSpan);
        return selectorContainer;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "header",
    name: "removerows",
    visibleIndex: -1,
    render: function (table) {
        var btn = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("button", "sa-table__btn sa-table__btn--green sa-table__header-extension ", { innerText: _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.getString("removeRows") });
        btn.onclick = function () {
            table.getCreatedRows().forEach(function (row) {
                if (row.getIsSelected()) {
                    row.remove();
                }
            });
        };
        return btn;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "header",
    name: "changelocale",
    visibleIndex: 1,
    render: function (table) {
        var locales = table.getLocales();
        if (table.options.disableLocaleSwitch || locales.length < 2)
            return null;
        var el = (_utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("select", "sa-table__header-extension", {}));
        var optionsValues = [_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.getString("changeLocale")].concat(locales);
        optionsValues.forEach(function (val) {
            var option = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("option", "", {
                value: val,
                text: _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames[val] || _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.getString(val) || val,
            });
            el.appendChild(option);
        });
        el.onchange = function () {
            table.locale = el.value;
        };
        return el;
    },
});
var HeaderExtensions;


/***/ }),

/***/ "./src/tables/extensions/rowextensions.ts":
/*!************************************************!*\
  !*** ./src/tables/extensions/rowextensions.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils/index.ts");
/* harmony import */ var _tableextensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tableextensions */ "./src/tables/extensions/tableextensions.ts");



_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "row",
    name: "details",
    visibleIndex: 0,
    render: function (_table, options) {
        var btn = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createSvgButton("detail");
        btn.title = _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.getString("showMinorColumns");
        btn.className += " sa-table__row-extension";
        btn.onclick = function () {
            options.row.toggleDetails();
        };
        return btn;
    },
});
_tableextensions__WEBPACK_IMPORTED_MODULE_2__.TableExtensions.registerExtension({
    location: "row",
    name: "select",
    visibleIndex: -1,
    render: function (_table, opt) {
        var row = opt.row;
        var checkbox = _utils__WEBPACK_IMPORTED_MODULE_1__.DocumentHelper.createElement("input", "sa-table__row-extension", {
            type: "checkbox",
        });
        checkbox.checked = row.getIsSelected();
        checkbox.onchange = function () {
            row.toggleSelect();
        };
        return checkbox;
    },
});


/***/ }),

/***/ "./src/tables/extensions/tableextensions.ts":
/*!**************************************************!*\
  !*** ./src/tables/extensions/tableextensions.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TableExtensions: () => (/* binding */ TableExtensions)
/* harmony export */ });
var TableExtensions = /** @class */ (function () {
    function TableExtensions(table) {
        this.table = table;
        this.renderedExtensions = [];
    }
    TableExtensions.prototype.render = function (targetNode, location, options) {
        var _this = this;
        var extensions = TableExtensions.extensions[location];
        if (!!extensions) {
            extensions = this.sortExtensions(extensions);
            extensions.forEach(function (extension) {
                if (!!extension.render && _this.table.allowExtension(extension)) {
                    var action = extension.render(_this.table, options);
                    if (!!action) {
                        targetNode.appendChild(action);
                        _this.renderedExtensions.push(extension);
                    }
                }
            });
        }
    };
    TableExtensions.prototype.destroy = function () {
        this.renderedExtensions.forEach(function (extension) {
            if (!!extension.destroy)
                extension.destroy();
        });
        this.renderedExtensions = [];
    };
    TableExtensions.registerExtension = function (extension) {
        if (!this.extensions[extension.location])
            this.extensions[extension.location] = [];
        this.extensions[extension.location].push(extension);
    };
    TableExtensions.removeExtension = function (extension) {
        if (!extension) {
            return;
        }
        var extensions = TableExtensions.extensions[extension.location];
        var index = extensions.indexOf(extension);
        if (index >= 0) {
            extensions.splice(index, 1);
        }
    };
    TableExtensions.unregisterExtension = function (location, actionName) {
        if (!actionName) {
            return;
        }
        if (!!location) {
            var extension = TableExtensions.findExtension(location, actionName);
            TableExtensions.removeExtension(extension);
        }
        else {
            Object.keys(this.extensions).forEach(function (location) { return TableExtensions.unregisterExtension(location, actionName); });
        }
    };
    TableExtensions.findExtension = function (location, actionName) {
        if (!this.extensions[location])
            return null;
        var extension = this.extensions[location].filter(function (extension) {
            return extension.name == actionName;
        })[0];
        return extension || null;
    };
    TableExtensions.prototype.sortExtensions = function (extensions) {
        if (!Array.isArray(extensions))
            return;
        return []
            .concat(extensions.filter(function (extension) { return extension.visibleIndex >= 0; }))
            .sort(function (firstExtension, secondExtension) {
            return firstExtension.visibleIndex - secondExtension.visibleIndex;
        });
    };
    TableExtensions.extensions = {};
    return TableExtensions;
}());



/***/ }),

/***/ "./src/tables/table.ts":
/*!*****************************!*\
  !*** ./src/tables/table.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Table: () => (/* binding */ Table),
/* harmony export */   TableEvent: () => (/* binding */ TableEvent),
/* harmony export */   TableRow: () => (/* binding */ TableRow)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ "./src/tables/config.ts");
/* harmony import */ var _extensions_detailsextensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extensions/detailsextensions */ "./src/tables/extensions/detailsextensions.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _extensions_tableextensions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extensions/tableextensions */ "./src/tables/extensions/tableextensions.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
/* harmony import */ var _columnbuilder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./columnbuilder */ "./src/tables/columnbuilder.ts");
/* harmony import */ var _columns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./columns */ "./src/tables/columns.ts");










// export type GetDataFn = (params: { filter?: any, limit?: number, offset?: number, callback?: (response: { data: Array<Object>, total: number, error?: any }) => void }) => Promise<{ data: Array<Object>, total: number, error?: any }> | void;
var TableEvent = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TableEvent, _super);
    function TableEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TableEvent;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__.EventBase));

var Table = /** @class */ (function () {
    function Table(_survey, data, _options, _columnsData) {
        if (_options === void 0) { _options = {}; }
        if (_columnsData === void 0) { _columnsData = []; }
        var _this = this;
        this._survey = _survey;
        this.data = data;
        this._options = _options;
        this._columnsData = _columnsData;
        this.haveCommercialLicense = false;
        this.currentPageSize = 5;
        this._rows = [];
        /**
         * Sets pagination selector content.
         */
        this.paginationSizeSelector = [1, 5, 10, 25, 50, 100];
        this.onColumnsVisibilityChanged = new TableEvent();
        this.onColumnsLocationChanged = new TableEvent();
        this.onRowRemoved = new TableEvent();
        this.buildColumns = function (survey) {
            var columns = [];
            _this._survey.getAllQuestions().forEach(function (question) {
                if (!_this.isNonValueQuestion(question)) {
                    var builder = _columnbuilder__WEBPACK_IMPORTED_MODULE_7__.ColumnsBuilderFactory.Instance.getColumnsBuilder(question.getTemplate());
                    columns = columns.concat(builder.buildColumns(question, _this));
                }
            });
            return columns;
        };
        /**
         * Fires when table state changed.
         */
        this.onStateChanged = new TableEvent();
        if (!this._options) {
            this._options = {};
        }
        this._columns = this.buildColumns(_survey);
        this.initTableData(data);
        _localizationManager__WEBPACK_IMPORTED_MODULE_4__.localization.currentLocale = this._survey.locale;
        this._columns = this.buildColumns(_survey);
        if (_columnsData.length !== 0) {
            this.updateColumnsFromData(this._columnsData);
        }
        this.extensions = new _extensions_tableextensions__WEBPACK_IMPORTED_MODULE_5__.TableExtensions(this);
        var f = survey_core__WEBPACK_IMPORTED_MODULE_1__.hasLicense;
        this.haveCommercialLicense = (!!f && f(4)) ||
            Table.haveCommercialLicense ||
            (!!_options &&
                (typeof _options.haveCommercialLicense !== "undefined"
                    ? _options.haveCommercialLicense
                    : false));
    }
    Table.prototype.getTableData = function () {
        return [].concat(this.tableData || []);
    };
    Table.prototype.getData = function () {
        return this.data;
    };
    Object.defineProperty(Table.prototype, "survey", {
        get: function () {
            return this._survey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "options", {
        get: function () {
            return this._options;
        },
        enumerable: false,
        configurable: true
    });
    Table.prototype.render = function (targetNode) {
        if (typeof targetNode === "string") {
            targetNode = document.getElementById(targetNode);
        }
        targetNode.innerHTML = "";
        if (!this.haveCommercialLicense) {
            targetNode.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_6__.createCommercialLicenseLink)());
        }
    };
    Table.prototype.enableColumnReorder = function () {
        this.isColumnReorderEnabled = true;
    };
    Table.prototype.disableColumnReorder = function () {
        this.isColumnReorderEnabled = false;
    };
    Table.prototype.getPageNumber = function () {
        return this.currentPageNumber;
    };
    Table.prototype.setPageNumber = function (value) {
        this.currentPageNumber = value;
    };
    /**
     * Returns current page size.
     */
    Table.prototype.getPageSize = function () {
        return this.currentPageSize;
    };
    /**
     * Sets current page size.
     */
    Table.prototype.setPageSize = function (value) {
        this.currentPageSize = value;
        this.onStateChanged.fire(this, this.state);
    };
    Table.prototype.getCreatedRows = function () {
        return [].concat(this._rows);
    };
    Table.prototype.clearCreatedRows = function () {
        this._rows.forEach(function (row) {
            row.destroy();
        });
        this._rows = [];
    };
    Object.defineProperty(Table.prototype, "useNamesAsTitles", {
        get: function () {
            return this._options && this._options.useNamesAsTitles === true;
        },
        enumerable: false,
        configurable: true
    });
    Table.prototype.isNonValueQuestion = function (question) {
        return survey_core__WEBPACK_IMPORTED_MODULE_1__.Serializer.isDescendantOf(question.getType(), "nonvalue");
    };
    Table.prototype.isColumnVisible = function (column) {
        if (column.location !== _config__WEBPACK_IMPORTED_MODULE_2__.QuestionLocation.Column)
            return false;
        return column.isVisible;
    };
    Object.defineProperty(Table.prototype, "columns", {
        get: function () {
            return [].concat(this._columns);
        },
        set: function (columns) {
            this._columns = columns;
            this.refresh(true);
            this.onStateChanged.fire(this, this.state);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "isInitTableDataProcessing", {
        get: function () { return this.isInitTableDataProcessingValue; },
        enumerable: false,
        configurable: true
    });
    Table.prototype.processLoadedDataItem = function (item) {
        var _this = this;
        var dataItem = {};
        this._survey.data = item;
        this._columns.forEach(function (column) {
            var opt = column.getCellData(_this, item);
            if (typeof _this._options.onGetQuestionValue === "function") {
                _this._options.onGetQuestionValue(opt);
            }
            dataItem[column.name] = opt.displayValue;
        });
        return dataItem;
    };
    Table.prototype.initTableData = function (data) {
        var _this = this;
        if (!Array.isArray(data)) {
            this.tableData = undefined;
            return;
        }
        this.isInitTableDataProcessingValue = true;
        this.tableData = (data || []).map(function (item) { return _this.processLoadedDataItem(item); });
        this.isInitTableDataProcessingValue = false;
    };
    Table.prototype.moveColumn = function (from, to) {
        var deletedColumns = this._columns.splice(from, 1);
        this._columns.splice(to, 0, deletedColumns[0]);
        this.onStateChanged.fire(this, this.state);
    };
    Table.prototype.setColumnLocation = function (columnName, location) {
        this.getColumnByName(columnName).location = location;
        this.onColumnsLocationChanged.fire(this, {
            columnName: columnName,
            location: location,
        });
        this.onStateChanged.fire(this, this.state);
    };
    Table.prototype.getColumnByName = function (columnName) {
        return this._columns.filter(function (column) { return column.name === columnName; })[0];
    };
    Table.prototype.setColumnVisibility = function (columnName, isVisible) {
        var column = this.getColumnByName(columnName);
        column.isVisible = isVisible;
        this.onColumnsVisibilityChanged.fire(this, {
            columnName: columnName,
            columnVisibility: isVisible,
        });
        this.onStateChanged.fire(this, this.state);
    };
    Table.prototype.setColumnWidth = function (columnName, width) {
        var column = this.getColumnByName(columnName);
        column.width = width;
        this.onStateChanged.fire(this, this.state);
    };
    Table.prototype.removeRow = function (row) {
        var index = this._rows.indexOf(row);
        this._rows.splice(index, 1);
        this.onRowRemoved.fire(this, { row: row });
    };
    Object.defineProperty(Table.prototype, "locale", {
        /**
         * Returns current locale of the table.
         * If locales more than one, the language selection dropdown will be added in the toolbar
         */
        get: function () {
            return _localizationManager__WEBPACK_IMPORTED_MODULE_4__.localization.currentLocale;
        },
        /**
         * Sets locale for table.
         */
        set: function (newLocale) {
            this._survey.locale = newLocale;
            _localizationManager__WEBPACK_IMPORTED_MODULE_4__.localization.currentLocale = newLocale;
            this.refresh(true);
            this.onStateChanged.fire(this, this.state);
        },
        enumerable: false,
        configurable: true
    });
    Table.prototype.getLocales = function () {
        return [].concat(this._survey.getUsedLocales());
    };
    Table.prototype.refresh = function (hard) {
        if (hard === void 0) { hard = false; }
        if (hard) {
            this.initTableData(this.data);
        }
        if (this.isRendered) {
            this.currentPageNumber = this.getPageNumber();
            var targetNode = this.renderResult;
            this.destroy();
            this.render(targetNode);
            this.setPageSize(this.currentPageSize);
            this.setPageNumber(this.currentPageNumber);
        }
    };
    Table.prototype.destroy = function () {
        this.clearCreatedRows();
        this.extensions.destroy();
        this.renderResult.innerHTML = "";
        this.renderResult = undefined;
    };
    Object.defineProperty(Table.prototype, "isRendered", {
        get: function () {
            return !!this.renderResult;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "state", {
        /**
         * Vizualization panel state getter.
         */
        get: function () {
            return {
                locale: _localizationManager__WEBPACK_IMPORTED_MODULE_4__.localization.currentLocale,
                elements: JSON.parse(JSON.stringify(this._columns)),
                pageSize: this.currentPageSize,
            };
        },
        /**
         * Vizualization panel state setter.
         */
        set: function (newState) {
            if (!newState)
                return;
            if (typeof newState.locale !== "undefined") {
                _localizationManager__WEBPACK_IMPORTED_MODULE_4__.localization.currentLocale = newState.locale;
                this._survey.locale = newState.locale;
                this.initTableData(this.data);
            }
            if (typeof newState.elements !== "undefined")
                this.updateColumnsFromData(newState.elements);
            if (typeof newState.pageSize !== "undefined")
                this.currentPageSize = newState.pageSize;
        },
        enumerable: false,
        configurable: true
    });
    Table.prototype.updateColumnsFromData = function (columnsData) {
        var _this = this;
        var columns = this._columns;
        columns.forEach(function (column) {
            var el = columnsData.filter(function (el) { return column.name === el.name; })[0];
            if (!!el) {
                column.fromJSON(el);
                column.visibleIndex = columnsData.indexOf(el);
            }
        });
        columnsData.forEach(function (el) {
            var column = columns.filter(function (column) { return column.name === el.name; })[0];
            if (!column) {
                column = new _columns__WEBPACK_IMPORTED_MODULE_8__.DefaultColumn(undefined, _this);
                column.fromJSON(el);
                column.visibleIndex = columnsData.indexOf(el);
                columns.push(column);
            }
        });
        this._columns = this._columns.sort(function (col1, col2) { return col1.visibleIndex - col2.visibleIndex; });
    };
    Object.defineProperty(Table.prototype, "permissions", {
        /**
         * Gets table permissions.
         */
        get: function () {
            return this._columns.map(function (column) {
                return {
                    name: column.name,
                    isPublic: column.isPublic,
                };
            });
        },
        /**
         * Sets table permissions.
         */
        set: function (permissions) {
            var updatedElements = this._columns.map(function (column) {
                permissions.forEach(function (permission) {
                    if (permission.name === column.name)
                        column.isPublic = permission.isPublic;
                });
                return column;
            });
            this._columns = [].concat(updatedElements);
            this.onPermissionsChangedCallback &&
                this.onPermissionsChangedCallback(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "allowSorting", {
        get: function () {
            return this.options.allowSorting === undefined || this.options.allowSorting === true;
        },
        enumerable: false,
        configurable: true
    });
    Table.prototype.allowExtension = function (extension) {
        if (extension.location === "column" && extension.name === "sort") {
            return this.allowSorting;
        }
        return true;
    };
    Table.showFilesAsImages = false;
    Table.haveCommercialLicense = false;
    return Table;
}());

var TableRow = /** @class */ (function () {
    function TableRow(table, extensionsContainer, detailsContainer) {
        var _this = this;
        this.table = table;
        this.extensionsContainer = extensionsContainer;
        this.detailsContainer = detailsContainer;
        this.detailedRowClass = "sa-table__detail-row";
        this.isDetailsExpanded = false;
        this.onToggleDetails = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        this.onColumnLocationChangedCallback = function () {
            _this.closeDetails();
        };
        this.details = new _extensions_detailsextensions__WEBPACK_IMPORTED_MODULE_3__.Details(table, this, detailsContainer);
        this.extensions = new _extensions_tableextensions__WEBPACK_IMPORTED_MODULE_5__.TableExtensions(table);
        table.onColumnsLocationChanged.add(this.onColumnLocationChangedCallback);
    }
    TableRow.prototype.render = function () {
        this.extensions.render(this.extensionsContainer, "row", { row: this });
    };
    TableRow.prototype.openDetails = function () {
        this.details.open();
        this.getElement().className += " " + this.detailedRowClass;
        this.onToggleDetails.fire(this, { isExpanded: true });
        this.isDetailsExpanded = true;
    };
    TableRow.prototype.closeDetails = function () {
        this.details.close();
        this.getElement().classList.remove(this.detailedRowClass);
        this.onToggleDetails.fire(this, { isExpanded: false });
        this.isDetailsExpanded = false;
    };
    TableRow.prototype.toggleDetails = function () {
        if (this.isDetailsExpanded) {
            this.closeDetails();
        }
        else
            this.openDetails();
    };
    TableRow.prototype.getIsSelected = function () {
        return this.isSelected;
    };
    TableRow.prototype.toggleSelect = function () {
        this.isSelected = !this.isSelected;
    };
    TableRow.prototype.remove = function () {
        this.table.removeRow(this);
    };
    TableRow.prototype.destroy = function () {
        this.table.onColumnsLocationChanged.remove(this.onColumnLocationChangedCallback);
        this.extensions.destroy();
    };
    return TableRow;
}());



/***/ }),

/***/ "./src/utils/helpers.ts":
/*!******************************!*\
  !*** ./src/utils/helpers.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __rest: () => (/* binding */ __rest)
/* harmony export */ });
var __assign = Object["assign"] ||
    function (target) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    target[p] = s[p];
        }
        return target;
    };
function __extends(thisClass, baseClass) {
    for (var p in baseClass)
        if (baseClass.hasOwnProperty(p))
            thisClass[p] = baseClass[p];
    function __() {
        this.constructor = thisClass;
    }
    thisClass.prototype =
        baseClass === null
            ? Object.create(baseClass)
            : ((__.prototype = baseClass.prototype), new __());
}
var __rest = function (source, e) {
    var result = {};
    for (var propertyName in source)
        if (Object.prototype.hasOwnProperty.call(source, propertyName) &&
            e.indexOf(propertyName) < 0)
            result[propertyName] = source[propertyName];
    if (source != null &&
        typeof Object["getOwnPropertySymbols"] === "function")
        for (var i = 0, propertySymbols = Object["getOwnPropertySymbols"](source); i < propertySymbols.length; i++)
            if (e.indexOf(propertySymbols[i]) < 0)
                result[propertySymbols[i]] = source[propertySymbols[i]];
    return result;
};
var __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3
        ? target
        : desc === null
            ? (desc = Object.getOwnPropertyDescriptor(target, key))
            : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i]))
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = { label: 0, sent: function () { if (t[0] & 1)
            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f)
            throw new TypeError("Generator is already executing.");
        while (_)
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                    return t;
                if (y = 0, t)
                    op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return { value: op[1], done: false };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [0];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2])
                            _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            }
            catch (e) {
                op = [6, e];
                y = 0;
            }
            finally {
                f = t = 0;
            }
        if (op[0] & 5)
            throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
    }
}


/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataHelper: () => (/* binding */ DataHelper),
/* harmony export */   DocumentHelper: () => (/* binding */ DocumentHelper),
/* harmony export */   allowDomRendering: () => (/* binding */ allowDomRendering),
/* harmony export */   createCommercialLicenseLink: () => (/* binding */ createCommercialLicenseLink),
/* harmony export */   createImagesContainer: () => (/* binding */ createImagesContainer),
/* harmony export */   createLinksContainer: () => (/* binding */ createLinksContainer),
/* harmony export */   createLoadingIndicator: () => (/* binding */ createLoadingIndicator),
/* harmony export */   options: () => (/* binding */ options),
/* harmony export */   toPrecision: () => (/* binding */ toPrecision)
/* harmony export */ });
var DocumentHelper = /** @class */ (function () {
    function DocumentHelper() {
    }
    DocumentHelper.createSelector = function (options, isSelected, handler) {
        var selectWrapper = document.createElement("div");
        selectWrapper.className = "sa-question__select-wrapper";
        var select = document.createElement("select");
        select.className = "sa-question__select";
        options.forEach(function (option) {
            var optionElement = DocumentHelper.createElement("option", "", {
                value: option.value,
                text: option.text,
                selected: isSelected(option),
            });
            select.appendChild(optionElement);
        });
        select.onchange = handler;
        selectWrapper.appendChild(select);
        return selectWrapper;
    };
    DocumentHelper.createButton = function (handler, text, className) {
        if (text === void 0) { text = ""; }
        if (className === void 0) { className = "sa-toolbar__button"; }
        var button = DocumentHelper.createElement("span", className, {
            innerText: text,
            onclick: handler,
        });
        return button;
    };
    DocumentHelper.createElement = function (tagName, className, attrs) {
        if (className === void 0) { className = ""; }
        var el = document.createElement(tagName);
        el.className = className;
        if (!!attrs) {
            Object.keys(attrs).forEach(function (key) {
                el[key] = attrs[key];
            });
        }
        return el;
    };
    DocumentHelper.createSvgElement = function (path) {
        var svgElem = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        var useElem = document.createElementNS("http://www.w3.org/2000/svg", "use");
        useElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#sa-svg-" + path);
        svgElem.appendChild(useElem);
        return svgElem;
    };
    DocumentHelper.createSvgButton = function (path) {
        var btn = (DocumentHelper.createElement("button", "sa-table__svg-button"));
        btn.appendChild(DocumentHelper.createSvgElement(path));
        return btn;
    };
    DocumentHelper.createSvgToggleButton = function (svgPath1, svPpath2, text1, text2, handler1, handler2, state, className) {
        if (state === void 0) { state = "first"; }
        if (className === void 0) { className = "sa-toolbar__button sa-toolbar__svg-button"; }
        var svg1 = DocumentHelper.createSvgElement(svgPath1);
        var svg2 = DocumentHelper.createSvgElement(svPpath2);
        var button = DocumentHelper.createElement("button", className);
        var toggle = function (e) {
            if (state === "first") {
                state = "second";
                button.title = text2;
                button.removeChild(svg1);
                button.appendChild(svg2);
                handler2(e);
            }
            else if (state === "second") {
                state = "first";
                button.title = text1;
                button.removeChild(svg2);
                button.appendChild(svg1);
                handler1(e);
            }
        };
        if (state === "first") {
            button.title = text1;
            button.appendChild(svg1);
        }
        else if ((state = "second")) {
            button.title = text2;
            button.appendChild(svg2);
        }
        button.onclick = toggle;
        return button;
    };
    DocumentHelper.createInput = function (className, placeholder, defaultValue) {
        if (placeholder === void 0) { placeholder = ""; }
        if (defaultValue === void 0) { defaultValue = ""; }
        var el = DocumentHelper.createElement("input", className, {
            placeholder: placeholder,
            defaultValue: defaultValue,
        });
        return el;
    };
    return DocumentHelper;
}());

var options = {
    runningInBrowser: typeof window.URL.createObjectURL === "function",
};
function allowDomRendering() {
    return options.runningInBrowser;
}
function createCommercialLicenseLink() {
    var container = DocumentHelper.createElement("div", "sa-commercial");
    var link = DocumentHelper.createElement("a", "sa-commercial__text", {
        href: "https://www.surveyjs.io/Buy",
        target: "_blank",
    });
    var containerSpan = DocumentHelper.createElement("span", "");
    var icon = DocumentHelper.createSvgElement("noncommercial");
    var textSpan = DocumentHelper.createElement("span", "sa-commercial__product", {
        innerText: "Please purchase a SurveyJS Analytics developer license to use it in your app.",
    });
    container.appendChild(link).appendChild(containerSpan);
    containerSpan.appendChild(icon);
    containerSpan.appendChild(textSpan);
    return container;
}
function createLoadingIndicator() {
    var container = DocumentHelper.createElement("div", "sa-data-loading-indicator-panel");
    var loadingIndicator = DocumentHelper.createElement("div", "sa-data-loading-indicator");
    loadingIndicator.innerHTML = "\n      <svg width=\"64\" height=\"64\" viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0_17928_11482)\">\n          <path d=\"M32 64C14.36 64 0 49.65 0 32C0 14.35 14.36 0 32 0C49.64 0 64 14.35 64 32C64 49.65 49.64 64 32 64ZM32 4C16.56 4 4 16.56 4 32C4 47.44 16.56 60 32 60C47.44 60 60 47.44 60 32C60 16.56 47.44 4 32 4Z\" fill=\"#E5E5E5\"></path>\n          <path d=\"M53.2101 55.2104C52.7001 55.2104 52.1901 55.0104 51.8001 54.6204C51.0201 53.8404 51.0201 52.5704 51.8001 51.7904C57.0901 46.5004 60.0001 39.4704 60.0001 31.9904C60.0001 24.5104 57.0901 17.4804 51.8001 12.1904C51.0201 11.4104 51.0201 10.1404 51.8001 9.36039C52.5801 8.58039 53.8501 8.58039 54.6301 9.36039C60.6701 15.4004 64.0001 23.4404 64.0001 31.9904C64.0001 40.5404 60.6701 48.5704 54.6301 54.6204C54.2401 55.0104 53.7301 55.2104 53.2201 55.2104H53.2101Z\" fill=\"#19B394\"></path>\n        </g>\n        <defs>\n          <clipPath id=\"clip0_17928_11482\">\n            <rect width=\"64\" height=\"64\" fill=\"white\"></rect>\n          </clipPath>\n        </defs>\n      </svg>\n      ";
    container.appendChild(loadingIndicator);
    return container;
}
var DataHelper = /** @class */ (function () {
    function DataHelper() {
    }
    DataHelper.zipArrays = function () {
        var arrays = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arrays[_i] = arguments[_i];
        }
        var zipArray = [];
        var _loop_1 = function (i) {
            zipArray[i] = [];
            arrays.forEach(function (arr) {
                zipArray[i].push(arr[i]);
            });
        };
        for (var i = 0; i < arrays[0].length; i++) {
            _loop_1(i);
        }
        return zipArray;
    };
    DataHelper.unzipArrays = function (zipArray) {
        var arrays = [];
        zipArray.forEach(function (value, i) {
            value.forEach(function (val, j) {
                if (!arrays[j])
                    arrays[j] = [];
                arrays[j][i] = val;
            });
        });
        return arrays;
    };
    DataHelper.sortDictionary = function (keys, values, desc) {
        var dictionary = this.zipArrays(keys, values);
        var comparator = function (a, b, asc) {
            if (asc === void 0) { asc = true; }
            var result = a[1] < b[1] ? 1 : a[1] == b[1] ? 0 : -1;
            return asc ? result : result * -1;
        };
        dictionary.sort(function (a, b) {
            return desc ? comparator(a, b, false) : comparator(a, b);
        });
        var keysAndValues = this.unzipArrays(dictionary);
        return { keys: keysAndValues[0], values: keysAndValues[1] };
    };
    DataHelper.toPercentage = function (value, maxValue) {
        return (value / maxValue) * 100;
    };
    return DataHelper;
}());

function createLinksContainer(links) {
    var linksContainer = DocumentHelper.createElement("div");
    links.forEach(function (link) {
        linksContainer.appendChild(DocumentHelper.createElement("a", "", {
            innerText: link.name,
            download: link.name,
            href: link.content,
        }));
    });
    return linksContainer;
}
function createImagesContainer(links) {
    var linksContainer = DocumentHelper.createElement("div");
    links.forEach(function (link) {
        linksContainer.appendChild(DocumentHelper.createElement("img", "", {
            alt: link.name,
            src: link.content,
        }));
    });
    return linksContainer;
}
function toPrecision(value, precision) {
    if (precision === void 0) { precision = 2; }
    var base = Math.pow(10, precision);
    return Math.round(base * value) / base;
}


/***/ }),

/***/ "survey-core":
/*!*********************************************************************************************************!*\
  !*** external {"root":"Survey","commonjs2":"survey-core","commonjs":"survey-core","amd":"survey-core"} ***!
  \*********************************************************************************************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_survey_core__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!***********************************!*\
  !*** ./src/entries/datatables.ts ***!
  \***********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataTables: () => (/* reexport safe */ _tables_datatables__WEBPACK_IMPORTED_MODULE_17__.DataTables),
/* harmony export */   DatatablesRow: () => (/* reexport safe */ _tables_datatables__WEBPACK_IMPORTED_MODULE_17__.DatatablesRow),
/* harmony export */   DocumentHelper: () => (/* reexport safe */ _utils_index__WEBPACK_IMPORTED_MODULE_19__.DocumentHelper),
/* harmony export */   Table: () => (/* reexport safe */ _tables_table__WEBPACK_IMPORTED_MODULE_16__.Table),
/* harmony export */   TableEvent: () => (/* reexport safe */ _tables_table__WEBPACK_IMPORTED_MODULE_16__.TableEvent),
/* harmony export */   TableExtensions: () => (/* reexport safe */ _tables_extensions_tableextensions__WEBPACK_IMPORTED_MODULE_18__.TableExtensions),
/* harmony export */   TableRow: () => (/* reexport safe */ _tables_table__WEBPACK_IMPORTED_MODULE_16__.TableRow),
/* harmony export */   localization: () => (/* reexport safe */ _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization),
/* harmony export */   surveyStrings: () => (/* reexport safe */ _localizationManager__WEBPACK_IMPORTED_MODULE_0__.surveyStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _analytics_localization_farsi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../analytics-localization/farsi */ "./src/analytics-localization/farsi.ts");
/* harmony import */ var _analytics_localization_french__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../analytics-localization/french */ "./src/analytics-localization/french.ts");
/* harmony import */ var _analytics_localization_german__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../analytics-localization/german */ "./src/analytics-localization/german.ts");
/* harmony import */ var _analytics_localization_norwegian__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../analytics-localization/norwegian */ "./src/analytics-localization/norwegian.ts");
/* harmony import */ var _analytics_localization_portuguese__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../analytics-localization/portuguese */ "./src/analytics-localization/portuguese.ts");
/* harmony import */ var _analytics_localization_russian__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../analytics-localization/russian */ "./src/analytics-localization/russian.ts");
/* harmony import */ var _analytics_localization_dutch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../analytics-localization/dutch */ "./src/analytics-localization/dutch.ts");
/* harmony import */ var _analytics_localization_spanish__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../analytics-localization/spanish */ "./src/analytics-localization/spanish.ts");
/* harmony import */ var _analytics_localization_italian__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../analytics-localization/italian */ "./src/analytics-localization/italian.ts");
/* harmony import */ var _analytics_localization_arabic__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../analytics-localization/arabic */ "./src/analytics-localization/arabic.ts");
/* harmony import */ var _analytics_localization_japanese__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../analytics-localization/japanese */ "./src/analytics-localization/japanese.ts");
/* harmony import */ var _tables_extensions_rowextensions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../tables/extensions/rowextensions */ "./src/tables/extensions/rowextensions.ts");
/* harmony import */ var _tables_extensions_headerextensions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../tables/extensions/headerextensions */ "./src/tables/extensions/headerextensions.ts");
/* harmony import */ var _tables_extensions_columnextensions__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../tables/extensions/columnextensions */ "./src/tables/extensions/columnextensions.ts");
/* harmony import */ var _tables_extensions_detailsextensions__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../tables/extensions/detailsextensions */ "./src/tables/extensions/detailsextensions.ts");
/* harmony import */ var _tables_table__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../tables/table */ "./src/tables/table.ts");
/* harmony import */ var _tables_datatables__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../tables/datatables */ "./src/tables/datatables.ts");
/* harmony import */ var _tables_extensions_tableextensions__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../tables/extensions/tableextensions */ "./src/tables/extensions/tableextensions.ts");
/* harmony import */ var _utils_index__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/index */ "./src/utils/index.ts");

//localization











//extensions









/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=survey.analytics.datatables.js.map